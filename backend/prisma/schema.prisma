generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Designer {
  addedBy   String?
  createdAt DateTime   @default(now())
  id        String     @id
  name      String     @unique
  updatedAt DateTime
  url       String
  User      User?      @relation(fields: [addedBy], references: [id])
  Typeface  Typeface[] @relation("TypefaceDesigner", references: [id])
}

model File {
  createdAt                     DateTime @default(now())
  encoding                      String
  filename                      String
  id                            String   @id
  mimetype                      String
  updatedAt                     DateTime
  url                           String   @unique
  Image_FileToImage_fullId      Image[]  @relation("FileToImage_fullId")
  Image_FileToImage_thumbnailId Image[]  @relation("FileToImage_thumbnailId")
}

model Foundry {
  addedBy   String?
  createdAt DateTime   @default(now())
  id        String     @id
  name      String     @unique
  updatedAt DateTime
  url       String
  User      User?      @relation(fields: [addedBy], references: [id])
  Typeface  Typeface[] @relation("TypefaceFoundry", references: [id])
}

model Image {
  createdAt                    DateTime @default(now())
  fullId                       String?
  id                           String   @id
  thumbnailId                  String?
  updatedAt                    DateTime
  File_FileToImage_fullId      File?    @relation("FileToImage_fullId", fields: [fullId], references: [id])
  File_FileToImage_thumbnailId File?    @relation("FileToImage_thumbnailId", fields: [thumbnailId], references: [id])
}

model Tag {
  createdAt DateTime   @default(now())
  id        String     @id
  name      String
  updatedAt DateTime
  Typeface  Typeface[] @relation("TypefaceTags", references: [id])
  Website   Website[]  @relation("WebsiteTags", references: [id])
}

model Typeface {
  addedBy     String?
  createdAt   DateTime   @default(now())
  description String?
  downloadUrl String
  id          String     @id
  imageId     String?    @unique
  name        String     @unique
  slug        String     @unique
  updatedAt   DateTime
  User        User?      @relation(fields: [addedBy], references: [id])
  Designer    Designer[] @relation("TypefaceDesigner", references: [id])
  Foundry     Foundry[]  @relation("TypefaceFoundry", references: [id])
  Tag         Tag[]      @relation("TypefaceTags", references: [id])
  Website     Website[]  @relation(references: [id])
}

model User {
  createdAt DateTime   @default(now())
  email     String     @unique
  id        String     @id
  name      String
  password  String
  role      Role       @default(SUBSCRIBER)
  updatedAt DateTime
  Designer  Designer[]
  Foundry   Foundry[]
  Typeface  Typeface[]
  Website   Website[]
}

model Website {
  addedBy     String?
  createdAt   DateTime   @default(now())
  featured    Boolean    @default(false)
  id          String     @id
  imageId     String?    @unique
  isPublished Boolean    @default(false)
  slug        String?    @unique
  title       String     @unique
  updatedAt   DateTime
  url         String
  User        User?      @relation(fields: [addedBy], references: [id])
  Typeface    Typeface[] @relation(references: [id])
  Tag         Tag[]      @relation("WebsiteTags", references: [id])
}

enum Role {
  ADMIN
  SUBSCRIBER
}