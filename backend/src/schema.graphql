# import Website, WebsiteCreateInput from "./generated/prisma.graphql"
# import File from "./generated/prisma.graphql"
# import Role from "./generated/prisma.graphql"
# import Typeface, TypefaceCreateInput from "./generated/prisma.graphql"
# import Designer, DesignerCreateInput from "./generated/prisma.graphql"
# import Foundry, FoundryCreateInput from "./generated/prisma.graphql"


scalar Upload

directive @isAuthenticated on FIELD_DEFINITION | QUERY | MUTATION

directive @hasRole(
  requires: [Role] = SUBSCRIBER
) on FIELD_DEFINITION | QUERY | MUTATION

directive @isOwner(
  type: String!
  field: String
) on FIELD_DEFINITION | QUERY | MUTATION



type Query {
  me: User @isAuthenticated
  users: [User!]! @hasRole(requires: [ADMIN, SUBSCRIBER])
  websites(
    where: WebsiteWhereInput
    orderBy: WebsiteOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Website]!
  userWebsites: [Website!]! 
  findTypefaces(search: String!): [Typeface!]!
  findDesigners(search: String!): [Designer!]!
  findFoundries(search: String!): [Foundry!]!
  website(slug: String!): Website!
}

input TypefaceInput {
  name: String!
}

input AddWebsiteInput {
  full: Upload!
  thumbnail: Upload!
  title: String!
  url: String!
  slug: String!
  typefaces: [String!]!
}

type Mutation {
  signup(email: String!, password: String!, name: String!): AuthPayload!
  login(email: String!, password: String!): AuthPayload!
  addWebsite(input: AddWebsiteInput): Website!
  addTypeface(input: TypefaceCreateInput): Typeface @isAuthenticated
  addFoundry(input: FoundryCreateInput): Foundry @isAuthenticated
  addDesigner(input: DesignerCreateInput): Designer @isAuthenticated
  uploadImage(file: Upload!): File
}

type AuthPayload {
  token: String!
  user: User!
}

type User {
  id: ID!
  email: String!
  name: String!
  role: Role
  websites: [Website!]!
}