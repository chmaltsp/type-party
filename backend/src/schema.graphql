# import Website, WebsiteCreateInput from "./generated/prisma.graphql"
# import File from "./generated/prisma.graphql"
# import Role from "./generated/prisma.graphql"
# import Typeface, TypefaceCreateInput from "./generated/prisma.graphql"
# import Designer, DesignerCreateInput from "./generated/prisma.graphql"
# import Foundry, FoundryCreateInput from "./generated/prisma.graphql"
# import Tag, TagCreateInput from "./generated/prisma.graphql"

scalar Upload

directive @isAuthenticated on FIELD_DEFINITION | QUERY | MUTATION

directive @hasRole(
  requires: [Role] = SUBSCRIBER
) on FIELD_DEFINITION | QUERY | MUTATION

directive @isOwner(
  type: String!
  field: String
) on FIELD_DEFINITION | QUERY | MUTATION


type Query {
  me: User @isAuthenticated
  users: [User!]! @hasRole(requires: [ADMIN, SUBSCRIBER])
  website(slug: String!): Website!
  websites(input: WebsitesInput): [Website!]!
  websitesCount: Int!
  userWebsites: [Website!]! 
  findTypefaces(search: String!): [Typeface!]!
  findTags(search: String!): [Tag!]!
  findDesigners(search: String!): [Designer!]!
  findFoundries(search: String!): [Foundry!]!
  typeface(slug: String!): Typeface!
  typefaces: [Typeface!]!
}

input TypefaceInput {
  name: String!
}

input WebsitesInput {
  skip: Int
  first: Int
  after: String
  randomize: Boolean
}

input AddWebsiteInput {
  full: Upload!
  thumbnail: Upload!
  title: String!
  url: String!
  slug: String!
  typefaces: [String!]!
  tags: [String!]!
  featured: Boolean!
}

input AddTypefaceInput {
  name: String!
  downloadUrl: String!
  description: String
  slug: String!
  foundries: [String!]!
  designers: [String!]!
  tags: [String!]!
  full: Upload!
}

input UpdateWebsiteInput {
  full: Upload
  thumbnail: Upload
  title: String!
  url: String!
  slug: String!
  typefaces: [String!]!
  tags: [String!]!
  featured: Boolean!
}

input UpdateTypefaceInput {
  name: String!
  downloadUrl: String!
  description: String
  slug: String!
  foundries: [String!]!
  designers: [String!]!
  tags: [String!]!
  full: Upload!
}

type Mutation {
  signup(email: String!, password: String!, name: String!): AuthPayload!
  login(email: String!, password: String!): AuthPayload!
  subscribeToEmailList(email: String): MailchimpPayload!
  addWebsite(input: AddWebsiteInput): Website! @hasRole(requires: [ADMIN])
  updateWebsite(input: UpdateWebsiteInput): Website! @hasRole(requires: [ADMIN])
  addTypeface(input: AddTypefaceInput): Typeface @isAuthenticated
  updateTypeface(input: UpdateTypefaceInput): Typeface @isAuthenticated
  addFoundry(input: FoundryCreateInput): Foundry @isAuthenticated
  addDesigner(input: DesignerCreateInput): Designer @isAuthenticated
  addTag(input: TagCreateInput): Tag @isAuthenticated
  uploadImage(file: Upload!): File
}

type MailchimpPayload {
  status: String!
}

type AuthPayload {
  token: String!
  user: User!
}

type User {
  id: ID!
  email: String!
  name: String!
  role: Role
  websites: [Website!]!
}
