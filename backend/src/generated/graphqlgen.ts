// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from 'graphql';
import { User, Website, Typeface, Foundry, Designer, File } from './prisma-client';
import { AuthPayload } from '../types/auth';
import { Context } from '../utils';

type Role = 'ADMIN' | 'SUBSCRIBER';
type TypefaceOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'downloadUrl_ASC'
  | 'downloadUrl_DESC'
  | 'description_ASC'
  | 'description_DESC'
  | 'slug_ASC'
  | 'slug_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC';
type WebsiteOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'isPublished_ASC'
  | 'isPublished_DESC'
  | 'title_ASC'
  | 'title_DESC'
  | 'thumbnail_ASC'
  | 'thumbnail_DESC'
  | 'slug_ASC'
  | 'slug_DESC'
  | 'url_ASC'
  | 'url_DESC'
  | 'image_ASC'
  | 'image_DESC'
  | 'featured_ASC'
  | 'featured_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC';
type DesignerOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'url_ASC'
  | 'url_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC';

export namespace QueryResolvers {
  export const defaultResolvers = {};

  export type MeResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | null | Promise<User | null>;

  export type UsersResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User[] | Promise<User[]>;

  export type WebsitesResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Website[] | Promise<Website[]>;

  export type UserWebsitesResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Website[] | Promise<Website[]>;

  export interface Type {
    me: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User | null | Promise<User | null>;

    users: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User[] | Promise<User[]>;

    websites: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Website[] | Promise<Website[]>;

    userWebsites: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Website[] | Promise<Website[]>;
  }
}

export namespace UserResolvers {
  export const defaultResolvers = {
    id: (parent: User) => parent.id,
    email: (parent: User) => parent.email,
    name: (parent: User) => parent.name,
    role: (parent: User) => parent.role,
  };

  export type IdResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type EmailResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type NameResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type RoleResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Role | null | Promise<Role | null>;

  export type WebsitesResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Website[] | Promise<Website[]>;

  export interface Type {
    id: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    email: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    name: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    role: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Role | null | Promise<Role | null>;

    websites: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Website[] | Promise<Website[]>;
  }
}

export namespace WebsiteResolvers {
  export const defaultResolvers = {
    id: (parent: Website) => parent.id,
    isPublished: (parent: Website) => parent.isPublished,
    title: (parent: Website) => parent.title,
    thumbnail: (parent: Website) => parent.thumbnail,
    slug: (parent: Website) => (parent.slug === undefined ? null : parent.slug),
    url: (parent: Website) => parent.url,
    image: (parent: Website) => parent.image,
    featured: (parent: Website) => parent.featured,
  };

  export interface TypefaceWhereInput {
    id: string | null;
    id_not: string | null;
    id_in: string[];
    id_not_in: string[];
    id_lt: string | null;
    id_lte: string | null;
    id_gt: string | null;
    id_gte: string | null;
    id_contains: string | null;
    id_not_contains: string | null;
    id_starts_with: string | null;
    id_not_starts_with: string | null;
    id_ends_with: string | null;
    id_not_ends_with: string | null;
    name: string | null;
    name_not: string | null;
    name_in: string[];
    name_not_in: string[];
    name_lt: string | null;
    name_lte: string | null;
    name_gt: string | null;
    name_gte: string | null;
    name_contains: string | null;
    name_not_contains: string | null;
    name_starts_with: string | null;
    name_not_starts_with: string | null;
    name_ends_with: string | null;
    name_not_ends_with: string | null;
    downloadUrl: string | null;
    downloadUrl_not: string | null;
    downloadUrl_in: string[];
    downloadUrl_not_in: string[];
    downloadUrl_lt: string | null;
    downloadUrl_lte: string | null;
    downloadUrl_gt: string | null;
    downloadUrl_gte: string | null;
    downloadUrl_contains: string | null;
    downloadUrl_not_contains: string | null;
    downloadUrl_starts_with: string | null;
    downloadUrl_not_starts_with: string | null;
    downloadUrl_ends_with: string | null;
    downloadUrl_not_ends_with: string | null;
    description: string | null;
    description_not: string | null;
    description_in: string[];
    description_not_in: string[];
    description_lt: string | null;
    description_lte: string | null;
    description_gt: string | null;
    description_gte: string | null;
    description_contains: string | null;
    description_not_contains: string | null;
    description_starts_with: string | null;
    description_not_starts_with: string | null;
    description_ends_with: string | null;
    description_not_ends_with: string | null;
    slug: string | null;
    slug_not: string | null;
    slug_in: string[];
    slug_not_in: string[];
    slug_lt: string | null;
    slug_lte: string | null;
    slug_gt: string | null;
    slug_gte: string | null;
    slug_contains: string | null;
    slug_not_contains: string | null;
    slug_starts_with: string | null;
    slug_not_starts_with: string | null;
    slug_ends_with: string | null;
    slug_not_ends_with: string | null;
    usedBy_every: WebsiteWhereInput | null;
    usedBy_some: WebsiteWhereInput | null;
    usedBy_none: WebsiteWhereInput | null;
    addedBy: UserWhereInput | null;
    foundry: FoundryWhereInput | null;
    designers_every: DesignerWhereInput | null;
    designers_some: DesignerWhereInput | null;
    designers_none: DesignerWhereInput | null;
    AND: TypefaceWhereInput[];
    OR: TypefaceWhereInput[];
    NOT: TypefaceWhereInput[];
  }
  export interface WebsiteWhereInput {
    id: string | null;
    id_not: string | null;
    id_in: string[];
    id_not_in: string[];
    id_lt: string | null;
    id_lte: string | null;
    id_gt: string | null;
    id_gte: string | null;
    id_contains: string | null;
    id_not_contains: string | null;
    id_starts_with: string | null;
    id_not_starts_with: string | null;
    id_ends_with: string | null;
    id_not_ends_with: string | null;
    isPublished: boolean | null;
    isPublished_not: boolean | null;
    title: string | null;
    title_not: string | null;
    title_in: string[];
    title_not_in: string[];
    title_lt: string | null;
    title_lte: string | null;
    title_gt: string | null;
    title_gte: string | null;
    title_contains: string | null;
    title_not_contains: string | null;
    title_starts_with: string | null;
    title_not_starts_with: string | null;
    title_ends_with: string | null;
    title_not_ends_with: string | null;
    thumbnail: string | null;
    thumbnail_not: string | null;
    thumbnail_in: string[];
    thumbnail_not_in: string[];
    thumbnail_lt: string | null;
    thumbnail_lte: string | null;
    thumbnail_gt: string | null;
    thumbnail_gte: string | null;
    thumbnail_contains: string | null;
    thumbnail_not_contains: string | null;
    thumbnail_starts_with: string | null;
    thumbnail_not_starts_with: string | null;
    thumbnail_ends_with: string | null;
    thumbnail_not_ends_with: string | null;
    slug: string | null;
    slug_not: string | null;
    slug_in: string[];
    slug_not_in: string[];
    slug_lt: string | null;
    slug_lte: string | null;
    slug_gt: string | null;
    slug_gte: string | null;
    slug_contains: string | null;
    slug_not_contains: string | null;
    slug_starts_with: string | null;
    slug_not_starts_with: string | null;
    slug_ends_with: string | null;
    slug_not_ends_with: string | null;
    url: string | null;
    url_not: string | null;
    url_in: string[];
    url_not_in: string[];
    url_lt: string | null;
    url_lte: string | null;
    url_gt: string | null;
    url_gte: string | null;
    url_contains: string | null;
    url_not_contains: string | null;
    url_starts_with: string | null;
    url_not_starts_with: string | null;
    url_ends_with: string | null;
    url_not_ends_with: string | null;
    image: string | null;
    image_not: string | null;
    image_in: string[];
    image_not_in: string[];
    image_lt: string | null;
    image_lte: string | null;
    image_gt: string | null;
    image_gte: string | null;
    image_contains: string | null;
    image_not_contains: string | null;
    image_starts_with: string | null;
    image_not_starts_with: string | null;
    image_ends_with: string | null;
    image_not_ends_with: string | null;
    addedBy: UserWhereInput | null;
    typefaces_every: TypefaceWhereInput | null;
    typefaces_some: TypefaceWhereInput | null;
    typefaces_none: TypefaceWhereInput | null;
    featured: boolean | null;
    featured_not: boolean | null;
    AND: WebsiteWhereInput[];
    OR: WebsiteWhereInput[];
    NOT: WebsiteWhereInput[];
  }
  export interface UserWhereInput {
    id: string | null;
    id_not: string | null;
    id_in: string[];
    id_not_in: string[];
    id_lt: string | null;
    id_lte: string | null;
    id_gt: string | null;
    id_gte: string | null;
    id_contains: string | null;
    id_not_contains: string | null;
    id_starts_with: string | null;
    id_not_starts_with: string | null;
    id_ends_with: string | null;
    id_not_ends_with: string | null;
    email: string | null;
    email_not: string | null;
    email_in: string[];
    email_not_in: string[];
    email_lt: string | null;
    email_lte: string | null;
    email_gt: string | null;
    email_gte: string | null;
    email_contains: string | null;
    email_not_contains: string | null;
    email_starts_with: string | null;
    email_not_starts_with: string | null;
    email_ends_with: string | null;
    email_not_ends_with: string | null;
    password: string | null;
    password_not: string | null;
    password_in: string[];
    password_not_in: string[];
    password_lt: string | null;
    password_lte: string | null;
    password_gt: string | null;
    password_gte: string | null;
    password_contains: string | null;
    password_not_contains: string | null;
    password_starts_with: string | null;
    password_not_starts_with: string | null;
    password_ends_with: string | null;
    password_not_ends_with: string | null;
    name: string | null;
    name_not: string | null;
    name_in: string[];
    name_not_in: string[];
    name_lt: string | null;
    name_lte: string | null;
    name_gt: string | null;
    name_gte: string | null;
    name_contains: string | null;
    name_not_contains: string | null;
    name_starts_with: string | null;
    name_not_starts_with: string | null;
    name_ends_with: string | null;
    name_not_ends_with: string | null;
    role: Role | null;
    role_not: Role | null;
    role_in: Role[];
    role_not_in: Role[];
    websites_every: WebsiteWhereInput | null;
    websites_some: WebsiteWhereInput | null;
    websites_none: WebsiteWhereInput | null;
    typefaces_every: TypefaceWhereInput | null;
    typefaces_some: TypefaceWhereInput | null;
    typefaces_none: TypefaceWhereInput | null;
    AND: UserWhereInput[];
    OR: UserWhereInput[];
    NOT: UserWhereInput[];
  }
  export interface FoundryWhereInput {
    id: string | null;
    id_not: string | null;
    id_in: string[];
    id_not_in: string[];
    id_lt: string | null;
    id_lte: string | null;
    id_gt: string | null;
    id_gte: string | null;
    id_contains: string | null;
    id_not_contains: string | null;
    id_starts_with: string | null;
    id_not_starts_with: string | null;
    id_ends_with: string | null;
    id_not_ends_with: string | null;
    name: string | null;
    name_not: string | null;
    name_in: string[];
    name_not_in: string[];
    name_lt: string | null;
    name_lte: string | null;
    name_gt: string | null;
    name_gte: string | null;
    name_contains: string | null;
    name_not_contains: string | null;
    name_starts_with: string | null;
    name_not_starts_with: string | null;
    name_ends_with: string | null;
    name_not_ends_with: string | null;
    url: string | null;
    url_not: string | null;
    url_in: string[];
    url_not_in: string[];
    url_lt: string | null;
    url_lte: string | null;
    url_gt: string | null;
    url_gte: string | null;
    url_contains: string | null;
    url_not_contains: string | null;
    url_starts_with: string | null;
    url_not_starts_with: string | null;
    url_ends_with: string | null;
    url_not_ends_with: string | null;
    fonts_every: TypefaceWhereInput | null;
    fonts_some: TypefaceWhereInput | null;
    fonts_none: TypefaceWhereInput | null;
    AND: FoundryWhereInput[];
    OR: FoundryWhereInput[];
    NOT: FoundryWhereInput[];
  }
  export interface DesignerWhereInput {
    id: string | null;
    id_not: string | null;
    id_in: string[];
    id_not_in: string[];
    id_lt: string | null;
    id_lte: string | null;
    id_gt: string | null;
    id_gte: string | null;
    id_contains: string | null;
    id_not_contains: string | null;
    id_starts_with: string | null;
    id_not_starts_with: string | null;
    id_ends_with: string | null;
    id_not_ends_with: string | null;
    name: string | null;
    name_not: string | null;
    name_in: string[];
    name_not_in: string[];
    name_lt: string | null;
    name_lte: string | null;
    name_gt: string | null;
    name_gte: string | null;
    name_contains: string | null;
    name_not_contains: string | null;
    name_starts_with: string | null;
    name_not_starts_with: string | null;
    name_ends_with: string | null;
    name_not_ends_with: string | null;
    url: string | null;
    url_not: string | null;
    url_in: string[];
    url_not_in: string[];
    url_lt: string | null;
    url_lte: string | null;
    url_gt: string | null;
    url_gte: string | null;
    url_contains: string | null;
    url_not_contains: string | null;
    url_starts_with: string | null;
    url_not_starts_with: string | null;
    url_ends_with: string | null;
    url_not_ends_with: string | null;
    typefaces_every: TypefaceWhereInput | null;
    typefaces_some: TypefaceWhereInput | null;
    typefaces_none: TypefaceWhereInput | null;
    AND: DesignerWhereInput[];
    OR: DesignerWhereInput[];
    NOT: DesignerWhereInput[];
  }

  export interface ArgsTypefaces {
    where: TypefaceWhereInput | null;
    orderBy: TypefaceOrderByInput | null;
    skip: number | null;
    after: string | null;
    before: string | null;
    first: number | null;
    last: number | null;
  }

  export type IdResolver = (
    parent: Website,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type IsPublishedResolver = (
    parent: Website,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  export type TitleResolver = (
    parent: Website,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type ThumbnailResolver = (
    parent: Website,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type SlugResolver = (
    parent: Website,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type UrlResolver = (
    parent: Website,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type ImageResolver = (
    parent: Website,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type AddedByResolver = (
    parent: Website,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | Promise<User>;

  export type TypefacesResolver = (
    parent: Website,
    args: ArgsTypefaces,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Typeface[] | Promise<Typeface[]>;

  export type FeaturedResolver = (
    parent: Website,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  export interface Type {
    id: (
      parent: Website,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    isPublished: (
      parent: Website,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;

    title: (
      parent: Website,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    thumbnail: (
      parent: Website,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    slug: (
      parent: Website,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    url: (
      parent: Website,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    image: (
      parent: Website,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    addedBy: (
      parent: Website,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User | Promise<User>;

    typefaces: (
      parent: Website,
      args: ArgsTypefaces,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Typeface[] | Promise<Typeface[]>;

    featured: (
      parent: Website,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;
  }
}

export namespace TypefaceResolvers {
  export const defaultResolvers = {
    id: (parent: Typeface) => parent.id,
    name: (parent: Typeface) => parent.name,
    downloadUrl: (parent: Typeface) => parent.downloadUrl,
    description: (parent: Typeface) =>
      parent.description === undefined ? null : parent.description,
    slug: (parent: Typeface) => parent.slug,
  };

  export interface WebsiteWhereInput {
    id: string | null;
    id_not: string | null;
    id_in: string[];
    id_not_in: string[];
    id_lt: string | null;
    id_lte: string | null;
    id_gt: string | null;
    id_gte: string | null;
    id_contains: string | null;
    id_not_contains: string | null;
    id_starts_with: string | null;
    id_not_starts_with: string | null;
    id_ends_with: string | null;
    id_not_ends_with: string | null;
    isPublished: boolean | null;
    isPublished_not: boolean | null;
    title: string | null;
    title_not: string | null;
    title_in: string[];
    title_not_in: string[];
    title_lt: string | null;
    title_lte: string | null;
    title_gt: string | null;
    title_gte: string | null;
    title_contains: string | null;
    title_not_contains: string | null;
    title_starts_with: string | null;
    title_not_starts_with: string | null;
    title_ends_with: string | null;
    title_not_ends_with: string | null;
    thumbnail: string | null;
    thumbnail_not: string | null;
    thumbnail_in: string[];
    thumbnail_not_in: string[];
    thumbnail_lt: string | null;
    thumbnail_lte: string | null;
    thumbnail_gt: string | null;
    thumbnail_gte: string | null;
    thumbnail_contains: string | null;
    thumbnail_not_contains: string | null;
    thumbnail_starts_with: string | null;
    thumbnail_not_starts_with: string | null;
    thumbnail_ends_with: string | null;
    thumbnail_not_ends_with: string | null;
    slug: string | null;
    slug_not: string | null;
    slug_in: string[];
    slug_not_in: string[];
    slug_lt: string | null;
    slug_lte: string | null;
    slug_gt: string | null;
    slug_gte: string | null;
    slug_contains: string | null;
    slug_not_contains: string | null;
    slug_starts_with: string | null;
    slug_not_starts_with: string | null;
    slug_ends_with: string | null;
    slug_not_ends_with: string | null;
    url: string | null;
    url_not: string | null;
    url_in: string[];
    url_not_in: string[];
    url_lt: string | null;
    url_lte: string | null;
    url_gt: string | null;
    url_gte: string | null;
    url_contains: string | null;
    url_not_contains: string | null;
    url_starts_with: string | null;
    url_not_starts_with: string | null;
    url_ends_with: string | null;
    url_not_ends_with: string | null;
    image: string | null;
    image_not: string | null;
    image_in: string[];
    image_not_in: string[];
    image_lt: string | null;
    image_lte: string | null;
    image_gt: string | null;
    image_gte: string | null;
    image_contains: string | null;
    image_not_contains: string | null;
    image_starts_with: string | null;
    image_not_starts_with: string | null;
    image_ends_with: string | null;
    image_not_ends_with: string | null;
    addedBy: UserWhereInput | null;
    typefaces_every: TypefaceWhereInput | null;
    typefaces_some: TypefaceWhereInput | null;
    typefaces_none: TypefaceWhereInput | null;
    featured: boolean | null;
    featured_not: boolean | null;
    AND: WebsiteWhereInput[];
    OR: WebsiteWhereInput[];
    NOT: WebsiteWhereInput[];
  }
  export interface UserWhereInput {
    id: string | null;
    id_not: string | null;
    id_in: string[];
    id_not_in: string[];
    id_lt: string | null;
    id_lte: string | null;
    id_gt: string | null;
    id_gte: string | null;
    id_contains: string | null;
    id_not_contains: string | null;
    id_starts_with: string | null;
    id_not_starts_with: string | null;
    id_ends_with: string | null;
    id_not_ends_with: string | null;
    email: string | null;
    email_not: string | null;
    email_in: string[];
    email_not_in: string[];
    email_lt: string | null;
    email_lte: string | null;
    email_gt: string | null;
    email_gte: string | null;
    email_contains: string | null;
    email_not_contains: string | null;
    email_starts_with: string | null;
    email_not_starts_with: string | null;
    email_ends_with: string | null;
    email_not_ends_with: string | null;
    password: string | null;
    password_not: string | null;
    password_in: string[];
    password_not_in: string[];
    password_lt: string | null;
    password_lte: string | null;
    password_gt: string | null;
    password_gte: string | null;
    password_contains: string | null;
    password_not_contains: string | null;
    password_starts_with: string | null;
    password_not_starts_with: string | null;
    password_ends_with: string | null;
    password_not_ends_with: string | null;
    name: string | null;
    name_not: string | null;
    name_in: string[];
    name_not_in: string[];
    name_lt: string | null;
    name_lte: string | null;
    name_gt: string | null;
    name_gte: string | null;
    name_contains: string | null;
    name_not_contains: string | null;
    name_starts_with: string | null;
    name_not_starts_with: string | null;
    name_ends_with: string | null;
    name_not_ends_with: string | null;
    role: Role | null;
    role_not: Role | null;
    role_in: Role[];
    role_not_in: Role[];
    websites_every: WebsiteWhereInput | null;
    websites_some: WebsiteWhereInput | null;
    websites_none: WebsiteWhereInput | null;
    typefaces_every: TypefaceWhereInput | null;
    typefaces_some: TypefaceWhereInput | null;
    typefaces_none: TypefaceWhereInput | null;
    AND: UserWhereInput[];
    OR: UserWhereInput[];
    NOT: UserWhereInput[];
  }
  export interface TypefaceWhereInput {
    id: string | null;
    id_not: string | null;
    id_in: string[];
    id_not_in: string[];
    id_lt: string | null;
    id_lte: string | null;
    id_gt: string | null;
    id_gte: string | null;
    id_contains: string | null;
    id_not_contains: string | null;
    id_starts_with: string | null;
    id_not_starts_with: string | null;
    id_ends_with: string | null;
    id_not_ends_with: string | null;
    name: string | null;
    name_not: string | null;
    name_in: string[];
    name_not_in: string[];
    name_lt: string | null;
    name_lte: string | null;
    name_gt: string | null;
    name_gte: string | null;
    name_contains: string | null;
    name_not_contains: string | null;
    name_starts_with: string | null;
    name_not_starts_with: string | null;
    name_ends_with: string | null;
    name_not_ends_with: string | null;
    downloadUrl: string | null;
    downloadUrl_not: string | null;
    downloadUrl_in: string[];
    downloadUrl_not_in: string[];
    downloadUrl_lt: string | null;
    downloadUrl_lte: string | null;
    downloadUrl_gt: string | null;
    downloadUrl_gte: string | null;
    downloadUrl_contains: string | null;
    downloadUrl_not_contains: string | null;
    downloadUrl_starts_with: string | null;
    downloadUrl_not_starts_with: string | null;
    downloadUrl_ends_with: string | null;
    downloadUrl_not_ends_with: string | null;
    description: string | null;
    description_not: string | null;
    description_in: string[];
    description_not_in: string[];
    description_lt: string | null;
    description_lte: string | null;
    description_gt: string | null;
    description_gte: string | null;
    description_contains: string | null;
    description_not_contains: string | null;
    description_starts_with: string | null;
    description_not_starts_with: string | null;
    description_ends_with: string | null;
    description_not_ends_with: string | null;
    slug: string | null;
    slug_not: string | null;
    slug_in: string[];
    slug_not_in: string[];
    slug_lt: string | null;
    slug_lte: string | null;
    slug_gt: string | null;
    slug_gte: string | null;
    slug_contains: string | null;
    slug_not_contains: string | null;
    slug_starts_with: string | null;
    slug_not_starts_with: string | null;
    slug_ends_with: string | null;
    slug_not_ends_with: string | null;
    usedBy_every: WebsiteWhereInput | null;
    usedBy_some: WebsiteWhereInput | null;
    usedBy_none: WebsiteWhereInput | null;
    addedBy: UserWhereInput | null;
    foundry: FoundryWhereInput | null;
    designers_every: DesignerWhereInput | null;
    designers_some: DesignerWhereInput | null;
    designers_none: DesignerWhereInput | null;
    AND: TypefaceWhereInput[];
    OR: TypefaceWhereInput[];
    NOT: TypefaceWhereInput[];
  }
  export interface FoundryWhereInput {
    id: string | null;
    id_not: string | null;
    id_in: string[];
    id_not_in: string[];
    id_lt: string | null;
    id_lte: string | null;
    id_gt: string | null;
    id_gte: string | null;
    id_contains: string | null;
    id_not_contains: string | null;
    id_starts_with: string | null;
    id_not_starts_with: string | null;
    id_ends_with: string | null;
    id_not_ends_with: string | null;
    name: string | null;
    name_not: string | null;
    name_in: string[];
    name_not_in: string[];
    name_lt: string | null;
    name_lte: string | null;
    name_gt: string | null;
    name_gte: string | null;
    name_contains: string | null;
    name_not_contains: string | null;
    name_starts_with: string | null;
    name_not_starts_with: string | null;
    name_ends_with: string | null;
    name_not_ends_with: string | null;
    url: string | null;
    url_not: string | null;
    url_in: string[];
    url_not_in: string[];
    url_lt: string | null;
    url_lte: string | null;
    url_gt: string | null;
    url_gte: string | null;
    url_contains: string | null;
    url_not_contains: string | null;
    url_starts_with: string | null;
    url_not_starts_with: string | null;
    url_ends_with: string | null;
    url_not_ends_with: string | null;
    fonts_every: TypefaceWhereInput | null;
    fonts_some: TypefaceWhereInput | null;
    fonts_none: TypefaceWhereInput | null;
    AND: FoundryWhereInput[];
    OR: FoundryWhereInput[];
    NOT: FoundryWhereInput[];
  }
  export interface DesignerWhereInput {
    id: string | null;
    id_not: string | null;
    id_in: string[];
    id_not_in: string[];
    id_lt: string | null;
    id_lte: string | null;
    id_gt: string | null;
    id_gte: string | null;
    id_contains: string | null;
    id_not_contains: string | null;
    id_starts_with: string | null;
    id_not_starts_with: string | null;
    id_ends_with: string | null;
    id_not_ends_with: string | null;
    name: string | null;
    name_not: string | null;
    name_in: string[];
    name_not_in: string[];
    name_lt: string | null;
    name_lte: string | null;
    name_gt: string | null;
    name_gte: string | null;
    name_contains: string | null;
    name_not_contains: string | null;
    name_starts_with: string | null;
    name_not_starts_with: string | null;
    name_ends_with: string | null;
    name_not_ends_with: string | null;
    url: string | null;
    url_not: string | null;
    url_in: string[];
    url_not_in: string[];
    url_lt: string | null;
    url_lte: string | null;
    url_gt: string | null;
    url_gte: string | null;
    url_contains: string | null;
    url_not_contains: string | null;
    url_starts_with: string | null;
    url_not_starts_with: string | null;
    url_ends_with: string | null;
    url_not_ends_with: string | null;
    typefaces_every: TypefaceWhereInput | null;
    typefaces_some: TypefaceWhereInput | null;
    typefaces_none: TypefaceWhereInput | null;
    AND: DesignerWhereInput[];
    OR: DesignerWhereInput[];
    NOT: DesignerWhereInput[];
  }

  export interface ArgsUsedBy {
    where: WebsiteWhereInput | null;
    orderBy: WebsiteOrderByInput | null;
    skip: number | null;
    after: string | null;
    before: string | null;
    first: number | null;
    last: number | null;
  }

  export interface ArgsDesigners {
    where: DesignerWhereInput | null;
    orderBy: DesignerOrderByInput | null;
    skip: number | null;
    after: string | null;
    before: string | null;
    first: number | null;
    last: number | null;
  }

  export type IdResolver = (
    parent: Typeface,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type NameResolver = (
    parent: Typeface,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type DownloadUrlResolver = (
    parent: Typeface,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type DescriptionResolver = (
    parent: Typeface,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type SlugResolver = (
    parent: Typeface,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type UsedByResolver = (
    parent: Typeface,
    args: ArgsUsedBy,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Website[] | Promise<Website[]>;

  export type AddedByResolver = (
    parent: Typeface,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | Promise<User>;

  export type FoundryResolver = (
    parent: Typeface,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Foundry | null | Promise<Foundry | null>;

  export type DesignersResolver = (
    parent: Typeface,
    args: ArgsDesigners,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Designer[] | Promise<Designer[]>;

  export interface Type {
    id: (
      parent: Typeface,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    name: (
      parent: Typeface,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    downloadUrl: (
      parent: Typeface,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    description: (
      parent: Typeface,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    slug: (
      parent: Typeface,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    usedBy: (
      parent: Typeface,
      args: ArgsUsedBy,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Website[] | Promise<Website[]>;

    addedBy: (
      parent: Typeface,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User | Promise<User>;

    foundry: (
      parent: Typeface,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Foundry | null | Promise<Foundry | null>;

    designers: (
      parent: Typeface,
      args: ArgsDesigners,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Designer[] | Promise<Designer[]>;
  }
}

export namespace FoundryResolvers {
  export const defaultResolvers = {
    id: (parent: Foundry) => parent.id,
    name: (parent: Foundry) => parent.name,
    url: (parent: Foundry) => parent.url,
  };

  export interface TypefaceWhereInput {
    id: string | null;
    id_not: string | null;
    id_in: string[];
    id_not_in: string[];
    id_lt: string | null;
    id_lte: string | null;
    id_gt: string | null;
    id_gte: string | null;
    id_contains: string | null;
    id_not_contains: string | null;
    id_starts_with: string | null;
    id_not_starts_with: string | null;
    id_ends_with: string | null;
    id_not_ends_with: string | null;
    name: string | null;
    name_not: string | null;
    name_in: string[];
    name_not_in: string[];
    name_lt: string | null;
    name_lte: string | null;
    name_gt: string | null;
    name_gte: string | null;
    name_contains: string | null;
    name_not_contains: string | null;
    name_starts_with: string | null;
    name_not_starts_with: string | null;
    name_ends_with: string | null;
    name_not_ends_with: string | null;
    downloadUrl: string | null;
    downloadUrl_not: string | null;
    downloadUrl_in: string[];
    downloadUrl_not_in: string[];
    downloadUrl_lt: string | null;
    downloadUrl_lte: string | null;
    downloadUrl_gt: string | null;
    downloadUrl_gte: string | null;
    downloadUrl_contains: string | null;
    downloadUrl_not_contains: string | null;
    downloadUrl_starts_with: string | null;
    downloadUrl_not_starts_with: string | null;
    downloadUrl_ends_with: string | null;
    downloadUrl_not_ends_with: string | null;
    description: string | null;
    description_not: string | null;
    description_in: string[];
    description_not_in: string[];
    description_lt: string | null;
    description_lte: string | null;
    description_gt: string | null;
    description_gte: string | null;
    description_contains: string | null;
    description_not_contains: string | null;
    description_starts_with: string | null;
    description_not_starts_with: string | null;
    description_ends_with: string | null;
    description_not_ends_with: string | null;
    slug: string | null;
    slug_not: string | null;
    slug_in: string[];
    slug_not_in: string[];
    slug_lt: string | null;
    slug_lte: string | null;
    slug_gt: string | null;
    slug_gte: string | null;
    slug_contains: string | null;
    slug_not_contains: string | null;
    slug_starts_with: string | null;
    slug_not_starts_with: string | null;
    slug_ends_with: string | null;
    slug_not_ends_with: string | null;
    usedBy_every: WebsiteWhereInput | null;
    usedBy_some: WebsiteWhereInput | null;
    usedBy_none: WebsiteWhereInput | null;
    addedBy: UserWhereInput | null;
    foundry: FoundryWhereInput | null;
    designers_every: DesignerWhereInput | null;
    designers_some: DesignerWhereInput | null;
    designers_none: DesignerWhereInput | null;
    AND: TypefaceWhereInput[];
    OR: TypefaceWhereInput[];
    NOT: TypefaceWhereInput[];
  }
  export interface WebsiteWhereInput {
    id: string | null;
    id_not: string | null;
    id_in: string[];
    id_not_in: string[];
    id_lt: string | null;
    id_lte: string | null;
    id_gt: string | null;
    id_gte: string | null;
    id_contains: string | null;
    id_not_contains: string | null;
    id_starts_with: string | null;
    id_not_starts_with: string | null;
    id_ends_with: string | null;
    id_not_ends_with: string | null;
    isPublished: boolean | null;
    isPublished_not: boolean | null;
    title: string | null;
    title_not: string | null;
    title_in: string[];
    title_not_in: string[];
    title_lt: string | null;
    title_lte: string | null;
    title_gt: string | null;
    title_gte: string | null;
    title_contains: string | null;
    title_not_contains: string | null;
    title_starts_with: string | null;
    title_not_starts_with: string | null;
    title_ends_with: string | null;
    title_not_ends_with: string | null;
    thumbnail: string | null;
    thumbnail_not: string | null;
    thumbnail_in: string[];
    thumbnail_not_in: string[];
    thumbnail_lt: string | null;
    thumbnail_lte: string | null;
    thumbnail_gt: string | null;
    thumbnail_gte: string | null;
    thumbnail_contains: string | null;
    thumbnail_not_contains: string | null;
    thumbnail_starts_with: string | null;
    thumbnail_not_starts_with: string | null;
    thumbnail_ends_with: string | null;
    thumbnail_not_ends_with: string | null;
    slug: string | null;
    slug_not: string | null;
    slug_in: string[];
    slug_not_in: string[];
    slug_lt: string | null;
    slug_lte: string | null;
    slug_gt: string | null;
    slug_gte: string | null;
    slug_contains: string | null;
    slug_not_contains: string | null;
    slug_starts_with: string | null;
    slug_not_starts_with: string | null;
    slug_ends_with: string | null;
    slug_not_ends_with: string | null;
    url: string | null;
    url_not: string | null;
    url_in: string[];
    url_not_in: string[];
    url_lt: string | null;
    url_lte: string | null;
    url_gt: string | null;
    url_gte: string | null;
    url_contains: string | null;
    url_not_contains: string | null;
    url_starts_with: string | null;
    url_not_starts_with: string | null;
    url_ends_with: string | null;
    url_not_ends_with: string | null;
    image: string | null;
    image_not: string | null;
    image_in: string[];
    image_not_in: string[];
    image_lt: string | null;
    image_lte: string | null;
    image_gt: string | null;
    image_gte: string | null;
    image_contains: string | null;
    image_not_contains: string | null;
    image_starts_with: string | null;
    image_not_starts_with: string | null;
    image_ends_with: string | null;
    image_not_ends_with: string | null;
    addedBy: UserWhereInput | null;
    typefaces_every: TypefaceWhereInput | null;
    typefaces_some: TypefaceWhereInput | null;
    typefaces_none: TypefaceWhereInput | null;
    featured: boolean | null;
    featured_not: boolean | null;
    AND: WebsiteWhereInput[];
    OR: WebsiteWhereInput[];
    NOT: WebsiteWhereInput[];
  }
  export interface UserWhereInput {
    id: string | null;
    id_not: string | null;
    id_in: string[];
    id_not_in: string[];
    id_lt: string | null;
    id_lte: string | null;
    id_gt: string | null;
    id_gte: string | null;
    id_contains: string | null;
    id_not_contains: string | null;
    id_starts_with: string | null;
    id_not_starts_with: string | null;
    id_ends_with: string | null;
    id_not_ends_with: string | null;
    email: string | null;
    email_not: string | null;
    email_in: string[];
    email_not_in: string[];
    email_lt: string | null;
    email_lte: string | null;
    email_gt: string | null;
    email_gte: string | null;
    email_contains: string | null;
    email_not_contains: string | null;
    email_starts_with: string | null;
    email_not_starts_with: string | null;
    email_ends_with: string | null;
    email_not_ends_with: string | null;
    password: string | null;
    password_not: string | null;
    password_in: string[];
    password_not_in: string[];
    password_lt: string | null;
    password_lte: string | null;
    password_gt: string | null;
    password_gte: string | null;
    password_contains: string | null;
    password_not_contains: string | null;
    password_starts_with: string | null;
    password_not_starts_with: string | null;
    password_ends_with: string | null;
    password_not_ends_with: string | null;
    name: string | null;
    name_not: string | null;
    name_in: string[];
    name_not_in: string[];
    name_lt: string | null;
    name_lte: string | null;
    name_gt: string | null;
    name_gte: string | null;
    name_contains: string | null;
    name_not_contains: string | null;
    name_starts_with: string | null;
    name_not_starts_with: string | null;
    name_ends_with: string | null;
    name_not_ends_with: string | null;
    role: Role | null;
    role_not: Role | null;
    role_in: Role[];
    role_not_in: Role[];
    websites_every: WebsiteWhereInput | null;
    websites_some: WebsiteWhereInput | null;
    websites_none: WebsiteWhereInput | null;
    typefaces_every: TypefaceWhereInput | null;
    typefaces_some: TypefaceWhereInput | null;
    typefaces_none: TypefaceWhereInput | null;
    AND: UserWhereInput[];
    OR: UserWhereInput[];
    NOT: UserWhereInput[];
  }
  export interface FoundryWhereInput {
    id: string | null;
    id_not: string | null;
    id_in: string[];
    id_not_in: string[];
    id_lt: string | null;
    id_lte: string | null;
    id_gt: string | null;
    id_gte: string | null;
    id_contains: string | null;
    id_not_contains: string | null;
    id_starts_with: string | null;
    id_not_starts_with: string | null;
    id_ends_with: string | null;
    id_not_ends_with: string | null;
    name: string | null;
    name_not: string | null;
    name_in: string[];
    name_not_in: string[];
    name_lt: string | null;
    name_lte: string | null;
    name_gt: string | null;
    name_gte: string | null;
    name_contains: string | null;
    name_not_contains: string | null;
    name_starts_with: string | null;
    name_not_starts_with: string | null;
    name_ends_with: string | null;
    name_not_ends_with: string | null;
    url: string | null;
    url_not: string | null;
    url_in: string[];
    url_not_in: string[];
    url_lt: string | null;
    url_lte: string | null;
    url_gt: string | null;
    url_gte: string | null;
    url_contains: string | null;
    url_not_contains: string | null;
    url_starts_with: string | null;
    url_not_starts_with: string | null;
    url_ends_with: string | null;
    url_not_ends_with: string | null;
    fonts_every: TypefaceWhereInput | null;
    fonts_some: TypefaceWhereInput | null;
    fonts_none: TypefaceWhereInput | null;
    AND: FoundryWhereInput[];
    OR: FoundryWhereInput[];
    NOT: FoundryWhereInput[];
  }
  export interface DesignerWhereInput {
    id: string | null;
    id_not: string | null;
    id_in: string[];
    id_not_in: string[];
    id_lt: string | null;
    id_lte: string | null;
    id_gt: string | null;
    id_gte: string | null;
    id_contains: string | null;
    id_not_contains: string | null;
    id_starts_with: string | null;
    id_not_starts_with: string | null;
    id_ends_with: string | null;
    id_not_ends_with: string | null;
    name: string | null;
    name_not: string | null;
    name_in: string[];
    name_not_in: string[];
    name_lt: string | null;
    name_lte: string | null;
    name_gt: string | null;
    name_gte: string | null;
    name_contains: string | null;
    name_not_contains: string | null;
    name_starts_with: string | null;
    name_not_starts_with: string | null;
    name_ends_with: string | null;
    name_not_ends_with: string | null;
    url: string | null;
    url_not: string | null;
    url_in: string[];
    url_not_in: string[];
    url_lt: string | null;
    url_lte: string | null;
    url_gt: string | null;
    url_gte: string | null;
    url_contains: string | null;
    url_not_contains: string | null;
    url_starts_with: string | null;
    url_not_starts_with: string | null;
    url_ends_with: string | null;
    url_not_ends_with: string | null;
    typefaces_every: TypefaceWhereInput | null;
    typefaces_some: TypefaceWhereInput | null;
    typefaces_none: TypefaceWhereInput | null;
    AND: DesignerWhereInput[];
    OR: DesignerWhereInput[];
    NOT: DesignerWhereInput[];
  }

  export interface ArgsFonts {
    where: TypefaceWhereInput | null;
    orderBy: TypefaceOrderByInput | null;
    skip: number | null;
    after: string | null;
    before: string | null;
    first: number | null;
    last: number | null;
  }

  export type IdResolver = (
    parent: Foundry,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type NameResolver = (
    parent: Foundry,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type UrlResolver = (
    parent: Foundry,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type FontsResolver = (
    parent: Foundry,
    args: ArgsFonts,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Typeface[] | Promise<Typeface[]>;

  export interface Type {
    id: (
      parent: Foundry,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    name: (
      parent: Foundry,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    url: (
      parent: Foundry,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    fonts: (
      parent: Foundry,
      args: ArgsFonts,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Typeface[] | Promise<Typeface[]>;
  }
}

export namespace DesignerResolvers {
  export const defaultResolvers = {
    id: (parent: Designer) => parent.id,
    name: (parent: Designer) => parent.name,
    url: (parent: Designer) => parent.url,
  };

  export interface TypefaceWhereInput {
    id: string | null;
    id_not: string | null;
    id_in: string[];
    id_not_in: string[];
    id_lt: string | null;
    id_lte: string | null;
    id_gt: string | null;
    id_gte: string | null;
    id_contains: string | null;
    id_not_contains: string | null;
    id_starts_with: string | null;
    id_not_starts_with: string | null;
    id_ends_with: string | null;
    id_not_ends_with: string | null;
    name: string | null;
    name_not: string | null;
    name_in: string[];
    name_not_in: string[];
    name_lt: string | null;
    name_lte: string | null;
    name_gt: string | null;
    name_gte: string | null;
    name_contains: string | null;
    name_not_contains: string | null;
    name_starts_with: string | null;
    name_not_starts_with: string | null;
    name_ends_with: string | null;
    name_not_ends_with: string | null;
    downloadUrl: string | null;
    downloadUrl_not: string | null;
    downloadUrl_in: string[];
    downloadUrl_not_in: string[];
    downloadUrl_lt: string | null;
    downloadUrl_lte: string | null;
    downloadUrl_gt: string | null;
    downloadUrl_gte: string | null;
    downloadUrl_contains: string | null;
    downloadUrl_not_contains: string | null;
    downloadUrl_starts_with: string | null;
    downloadUrl_not_starts_with: string | null;
    downloadUrl_ends_with: string | null;
    downloadUrl_not_ends_with: string | null;
    description: string | null;
    description_not: string | null;
    description_in: string[];
    description_not_in: string[];
    description_lt: string | null;
    description_lte: string | null;
    description_gt: string | null;
    description_gte: string | null;
    description_contains: string | null;
    description_not_contains: string | null;
    description_starts_with: string | null;
    description_not_starts_with: string | null;
    description_ends_with: string | null;
    description_not_ends_with: string | null;
    slug: string | null;
    slug_not: string | null;
    slug_in: string[];
    slug_not_in: string[];
    slug_lt: string | null;
    slug_lte: string | null;
    slug_gt: string | null;
    slug_gte: string | null;
    slug_contains: string | null;
    slug_not_contains: string | null;
    slug_starts_with: string | null;
    slug_not_starts_with: string | null;
    slug_ends_with: string | null;
    slug_not_ends_with: string | null;
    usedBy_every: WebsiteWhereInput | null;
    usedBy_some: WebsiteWhereInput | null;
    usedBy_none: WebsiteWhereInput | null;
    addedBy: UserWhereInput | null;
    foundry: FoundryWhereInput | null;
    designers_every: DesignerWhereInput | null;
    designers_some: DesignerWhereInput | null;
    designers_none: DesignerWhereInput | null;
    AND: TypefaceWhereInput[];
    OR: TypefaceWhereInput[];
    NOT: TypefaceWhereInput[];
  }
  export interface WebsiteWhereInput {
    id: string | null;
    id_not: string | null;
    id_in: string[];
    id_not_in: string[];
    id_lt: string | null;
    id_lte: string | null;
    id_gt: string | null;
    id_gte: string | null;
    id_contains: string | null;
    id_not_contains: string | null;
    id_starts_with: string | null;
    id_not_starts_with: string | null;
    id_ends_with: string | null;
    id_not_ends_with: string | null;
    isPublished: boolean | null;
    isPublished_not: boolean | null;
    title: string | null;
    title_not: string | null;
    title_in: string[];
    title_not_in: string[];
    title_lt: string | null;
    title_lte: string | null;
    title_gt: string | null;
    title_gte: string | null;
    title_contains: string | null;
    title_not_contains: string | null;
    title_starts_with: string | null;
    title_not_starts_with: string | null;
    title_ends_with: string | null;
    title_not_ends_with: string | null;
    thumbnail: string | null;
    thumbnail_not: string | null;
    thumbnail_in: string[];
    thumbnail_not_in: string[];
    thumbnail_lt: string | null;
    thumbnail_lte: string | null;
    thumbnail_gt: string | null;
    thumbnail_gte: string | null;
    thumbnail_contains: string | null;
    thumbnail_not_contains: string | null;
    thumbnail_starts_with: string | null;
    thumbnail_not_starts_with: string | null;
    thumbnail_ends_with: string | null;
    thumbnail_not_ends_with: string | null;
    slug: string | null;
    slug_not: string | null;
    slug_in: string[];
    slug_not_in: string[];
    slug_lt: string | null;
    slug_lte: string | null;
    slug_gt: string | null;
    slug_gte: string | null;
    slug_contains: string | null;
    slug_not_contains: string | null;
    slug_starts_with: string | null;
    slug_not_starts_with: string | null;
    slug_ends_with: string | null;
    slug_not_ends_with: string | null;
    url: string | null;
    url_not: string | null;
    url_in: string[];
    url_not_in: string[];
    url_lt: string | null;
    url_lte: string | null;
    url_gt: string | null;
    url_gte: string | null;
    url_contains: string | null;
    url_not_contains: string | null;
    url_starts_with: string | null;
    url_not_starts_with: string | null;
    url_ends_with: string | null;
    url_not_ends_with: string | null;
    image: string | null;
    image_not: string | null;
    image_in: string[];
    image_not_in: string[];
    image_lt: string | null;
    image_lte: string | null;
    image_gt: string | null;
    image_gte: string | null;
    image_contains: string | null;
    image_not_contains: string | null;
    image_starts_with: string | null;
    image_not_starts_with: string | null;
    image_ends_with: string | null;
    image_not_ends_with: string | null;
    addedBy: UserWhereInput | null;
    typefaces_every: TypefaceWhereInput | null;
    typefaces_some: TypefaceWhereInput | null;
    typefaces_none: TypefaceWhereInput | null;
    featured: boolean | null;
    featured_not: boolean | null;
    AND: WebsiteWhereInput[];
    OR: WebsiteWhereInput[];
    NOT: WebsiteWhereInput[];
  }
  export interface UserWhereInput {
    id: string | null;
    id_not: string | null;
    id_in: string[];
    id_not_in: string[];
    id_lt: string | null;
    id_lte: string | null;
    id_gt: string | null;
    id_gte: string | null;
    id_contains: string | null;
    id_not_contains: string | null;
    id_starts_with: string | null;
    id_not_starts_with: string | null;
    id_ends_with: string | null;
    id_not_ends_with: string | null;
    email: string | null;
    email_not: string | null;
    email_in: string[];
    email_not_in: string[];
    email_lt: string | null;
    email_lte: string | null;
    email_gt: string | null;
    email_gte: string | null;
    email_contains: string | null;
    email_not_contains: string | null;
    email_starts_with: string | null;
    email_not_starts_with: string | null;
    email_ends_with: string | null;
    email_not_ends_with: string | null;
    password: string | null;
    password_not: string | null;
    password_in: string[];
    password_not_in: string[];
    password_lt: string | null;
    password_lte: string | null;
    password_gt: string | null;
    password_gte: string | null;
    password_contains: string | null;
    password_not_contains: string | null;
    password_starts_with: string | null;
    password_not_starts_with: string | null;
    password_ends_with: string | null;
    password_not_ends_with: string | null;
    name: string | null;
    name_not: string | null;
    name_in: string[];
    name_not_in: string[];
    name_lt: string | null;
    name_lte: string | null;
    name_gt: string | null;
    name_gte: string | null;
    name_contains: string | null;
    name_not_contains: string | null;
    name_starts_with: string | null;
    name_not_starts_with: string | null;
    name_ends_with: string | null;
    name_not_ends_with: string | null;
    role: Role | null;
    role_not: Role | null;
    role_in: Role[];
    role_not_in: Role[];
    websites_every: WebsiteWhereInput | null;
    websites_some: WebsiteWhereInput | null;
    websites_none: WebsiteWhereInput | null;
    typefaces_every: TypefaceWhereInput | null;
    typefaces_some: TypefaceWhereInput | null;
    typefaces_none: TypefaceWhereInput | null;
    AND: UserWhereInput[];
    OR: UserWhereInput[];
    NOT: UserWhereInput[];
  }
  export interface FoundryWhereInput {
    id: string | null;
    id_not: string | null;
    id_in: string[];
    id_not_in: string[];
    id_lt: string | null;
    id_lte: string | null;
    id_gt: string | null;
    id_gte: string | null;
    id_contains: string | null;
    id_not_contains: string | null;
    id_starts_with: string | null;
    id_not_starts_with: string | null;
    id_ends_with: string | null;
    id_not_ends_with: string | null;
    name: string | null;
    name_not: string | null;
    name_in: string[];
    name_not_in: string[];
    name_lt: string | null;
    name_lte: string | null;
    name_gt: string | null;
    name_gte: string | null;
    name_contains: string | null;
    name_not_contains: string | null;
    name_starts_with: string | null;
    name_not_starts_with: string | null;
    name_ends_with: string | null;
    name_not_ends_with: string | null;
    url: string | null;
    url_not: string | null;
    url_in: string[];
    url_not_in: string[];
    url_lt: string | null;
    url_lte: string | null;
    url_gt: string | null;
    url_gte: string | null;
    url_contains: string | null;
    url_not_contains: string | null;
    url_starts_with: string | null;
    url_not_starts_with: string | null;
    url_ends_with: string | null;
    url_not_ends_with: string | null;
    fonts_every: TypefaceWhereInput | null;
    fonts_some: TypefaceWhereInput | null;
    fonts_none: TypefaceWhereInput | null;
    AND: FoundryWhereInput[];
    OR: FoundryWhereInput[];
    NOT: FoundryWhereInput[];
  }
  export interface DesignerWhereInput {
    id: string | null;
    id_not: string | null;
    id_in: string[];
    id_not_in: string[];
    id_lt: string | null;
    id_lte: string | null;
    id_gt: string | null;
    id_gte: string | null;
    id_contains: string | null;
    id_not_contains: string | null;
    id_starts_with: string | null;
    id_not_starts_with: string | null;
    id_ends_with: string | null;
    id_not_ends_with: string | null;
    name: string | null;
    name_not: string | null;
    name_in: string[];
    name_not_in: string[];
    name_lt: string | null;
    name_lte: string | null;
    name_gt: string | null;
    name_gte: string | null;
    name_contains: string | null;
    name_not_contains: string | null;
    name_starts_with: string | null;
    name_not_starts_with: string | null;
    name_ends_with: string | null;
    name_not_ends_with: string | null;
    url: string | null;
    url_not: string | null;
    url_in: string[];
    url_not_in: string[];
    url_lt: string | null;
    url_lte: string | null;
    url_gt: string | null;
    url_gte: string | null;
    url_contains: string | null;
    url_not_contains: string | null;
    url_starts_with: string | null;
    url_not_starts_with: string | null;
    url_ends_with: string | null;
    url_not_ends_with: string | null;
    typefaces_every: TypefaceWhereInput | null;
    typefaces_some: TypefaceWhereInput | null;
    typefaces_none: TypefaceWhereInput | null;
    AND: DesignerWhereInput[];
    OR: DesignerWhereInput[];
    NOT: DesignerWhereInput[];
  }

  export interface ArgsTypefaces {
    where: TypefaceWhereInput | null;
    orderBy: TypefaceOrderByInput | null;
    skip: number | null;
    after: string | null;
    before: string | null;
    first: number | null;
    last: number | null;
  }

  export type IdResolver = (
    parent: Designer,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type NameResolver = (
    parent: Designer,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type UrlResolver = (
    parent: Designer,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type TypefacesResolver = (
    parent: Designer,
    args: ArgsTypefaces,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Typeface[] | Promise<Typeface[]>;

  export interface Type {
    id: (
      parent: Designer,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    name: (
      parent: Designer,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    url: (
      parent: Designer,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    typefaces: (
      parent: Designer,
      args: ArgsTypefaces,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Typeface[] | Promise<Typeface[]>;
  }
}

export namespace MutationResolvers {
  export const defaultResolvers = {};

  export interface TypefaceCreateInput {
    name: string;
    downloadUrl: string;
    description: string | null;
    slug: string;
    usedBy: WebsiteCreateManyWithoutTypefacesInput | null;
    addedBy: UserCreateOneWithoutTypefacesInput;
    foundry: FoundryCreateOneWithoutFontsInput | null;
    designers: DesignerCreateManyWithoutTypefacesInput | null;
  }
  export interface WebsiteCreateManyWithoutTypefacesInput {
    create: WebsiteCreateWithoutTypefacesInput[];
    connect: WebsiteWhereUniqueInput[];
  }
  export interface WebsiteCreateWithoutTypefacesInput {
    isPublished: boolean | null;
    title: string;
    thumbnail: string;
    slug: string | null;
    url: string;
    image: string;
    addedBy: UserCreateOneWithoutWebsitesInput;
    featured: boolean | null;
  }
  export interface UserCreateOneWithoutWebsitesInput {
    create: UserCreateWithoutWebsitesInput | null;
    connect: UserWhereUniqueInput | null;
  }
  export interface UserCreateWithoutWebsitesInput {
    email: string;
    password: string;
    name: string;
    role: Role | null;
    typefaces: TypefaceCreateManyWithoutAddedByInput | null;
  }
  export interface TypefaceCreateManyWithoutAddedByInput {
    create: TypefaceCreateWithoutAddedByInput[];
    connect: TypefaceWhereUniqueInput[];
  }
  export interface TypefaceCreateWithoutAddedByInput {
    name: string;
    downloadUrl: string;
    description: string | null;
    slug: string;
    usedBy: WebsiteCreateManyWithoutTypefacesInput | null;
    foundry: FoundryCreateOneWithoutFontsInput | null;
    designers: DesignerCreateManyWithoutTypefacesInput | null;
  }
  export interface FoundryCreateOneWithoutFontsInput {
    create: FoundryCreateWithoutFontsInput | null;
    connect: FoundryWhereUniqueInput | null;
  }
  export interface FoundryCreateWithoutFontsInput {
    name: string;
    url: string;
  }
  export interface FoundryWhereUniqueInput {
    id: string | null;
  }
  export interface DesignerCreateManyWithoutTypefacesInput {
    create: DesignerCreateWithoutTypefacesInput[];
    connect: DesignerWhereUniqueInput[];
  }
  export interface DesignerCreateWithoutTypefacesInput {
    name: string;
    url: string;
  }
  export interface DesignerWhereUniqueInput {
    id: string | null;
    name: string | null;
  }
  export interface TypefaceWhereUniqueInput {
    id: string | null;
  }
  export interface UserWhereUniqueInput {
    id: string | null;
    email: string | null;
  }
  export interface WebsiteWhereUniqueInput {
    id: string | null;
  }
  export interface UserCreateOneWithoutTypefacesInput {
    create: UserCreateWithoutTypefacesInput | null;
    connect: UserWhereUniqueInput | null;
  }
  export interface UserCreateWithoutTypefacesInput {
    email: string;
    password: string;
    name: string;
    role: Role | null;
    websites: WebsiteCreateManyWithoutAddedByInput | null;
  }
  export interface WebsiteCreateManyWithoutAddedByInput {
    create: WebsiteCreateWithoutAddedByInput[];
    connect: WebsiteWhereUniqueInput[];
  }
  export interface WebsiteCreateWithoutAddedByInput {
    isPublished: boolean | null;
    title: string;
    thumbnail: string;
    slug: string | null;
    url: string;
    image: string;
    typefaces: TypefaceCreateManyWithoutUsedByInput | null;
    featured: boolean | null;
  }
  export interface TypefaceCreateManyWithoutUsedByInput {
    create: TypefaceCreateWithoutUsedByInput[];
    connect: TypefaceWhereUniqueInput[];
  }
  export interface TypefaceCreateWithoutUsedByInput {
    name: string;
    downloadUrl: string;
    description: string | null;
    slug: string;
    addedBy: UserCreateOneWithoutTypefacesInput;
    foundry: FoundryCreateOneWithoutFontsInput | null;
    designers: DesignerCreateManyWithoutTypefacesInput | null;
  }

  export interface ArgsSignup {
    email: string;
    password: string;
    name: string;
  }

  export interface ArgsLogin {
    email: string;
    password: string;
  }

  export interface ArgsAddWebsite {
    title: string;
    thumbnail: string;
    url: string;
    image: string | null;
  }

  export interface ArgsAddTypeface {
    input: TypefaceCreateInput | null;
  }

  export interface ArgsUploadImage {
    file: string;
  }

  export type SignupResolver = (
    parent: undefined,
    args: ArgsSignup,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => AuthPayload | Promise<AuthPayload>;

  export type LoginResolver = (
    parent: undefined,
    args: ArgsLogin,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => AuthPayload | Promise<AuthPayload>;

  export type AddWebsiteResolver = (
    parent: undefined,
    args: ArgsAddWebsite,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Website | Promise<Website>;

  export type AddTypefaceResolver = (
    parent: undefined,
    args: ArgsAddTypeface,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Typeface | null | Promise<Typeface | null>;

  export type UploadImageResolver = (
    parent: undefined,
    args: ArgsUploadImage,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => File | null | Promise<File | null>;

  export interface Type {
    signup: (
      parent: undefined,
      args: ArgsSignup,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => AuthPayload | Promise<AuthPayload>;

    login: (
      parent: undefined,
      args: ArgsLogin,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => AuthPayload | Promise<AuthPayload>;

    addWebsite: (
      parent: undefined,
      args: ArgsAddWebsite,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Website | Promise<Website>;

    addTypeface: (
      parent: undefined,
      args: ArgsAddTypeface,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Typeface | null | Promise<Typeface | null>;

    uploadImage: (
      parent: undefined,
      args: ArgsUploadImage,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => File | null | Promise<File | null>;
  }
}

export namespace AuthPayloadResolvers {
  export const defaultResolvers = {
    token: (parent: AuthPayload) => parent.token,
  };

  export type TokenResolver = (
    parent: AuthPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type UserResolver = (
    parent: AuthPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | Promise<User>;

  export interface Type {
    token: (
      parent: AuthPayload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    user: (
      parent: AuthPayload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User | Promise<User>;
  }
}

export namespace FileResolvers {
  export const defaultResolvers = {
    id: (parent: File) => parent.id,
    createdAt: (parent: File) => parent.createdAt,
    updatedAt: (parent: File) => parent.updatedAt,
    filename: (parent: File) => parent.filename,
    mimetype: (parent: File) => parent.mimetype,
    encoding: (parent: File) => parent.encoding,
    url: (parent: File) => parent.url,
  };

  export type IdResolver = (
    parent: File,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type CreatedAtResolver = (
    parent: File,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type UpdatedAtResolver = (
    parent: File,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type FilenameResolver = (
    parent: File,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type MimetypeResolver = (
    parent: File,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type EncodingResolver = (
    parent: File,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type UrlResolver = (
    parent: File,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export interface Type {
    id: (
      parent: File,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    createdAt: (
      parent: File,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    updatedAt: (
      parent: File,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    filename: (
      parent: File,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    mimetype: (
      parent: File,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    encoding: (
      parent: File,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    url: (
      parent: File,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
  }
}

export interface Resolvers {
  Query: QueryResolvers.Type;
  User: UserResolvers.Type;
  Website: WebsiteResolvers.Type;
  Typeface: TypefaceResolvers.Type;
  Foundry: FoundryResolvers.Type;
  Designer: DesignerResolvers.Type;
  Mutation: MutationResolvers.Type;
  AuthPayload: AuthPayloadResolvers.Type;
  File: FileResolvers.Type;
}
