// Code generated by Prisma (prisma@1.21.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode, GraphQLSchema } from "graphql";
import { makePrismaClientClass, BaseClientOptions } from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  file: (where?: FileWhereInput) => Promise<boolean>;
  foundry: (where?: FoundryWhereInput) => Promise<boolean>;
  post: (where?: PostWhereInput) => Promise<boolean>;
  typeface: (where?: TypefaceWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
  website: (where?: WebsiteWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  file: (where: FileWhereUniqueInput) => FilePromise;
  files: (
    args?: {
      where?: FileWhereInput;
      orderBy?: FileOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<File>;
  filesConnection: (
    args?: {
      where?: FileWhereInput;
      orderBy?: FileOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FileConnectionPromise;
  foundry: (where: FoundryWhereUniqueInput) => FoundryPromise;
  foundries: (
    args?: {
      where?: FoundryWhereInput;
      orderBy?: FoundryOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Foundry>;
  foundriesConnection: (
    args?: {
      where?: FoundryWhereInput;
      orderBy?: FoundryOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FoundryConnectionPromise;
  post: (where: PostWhereUniqueInput) => PostPromise;
  posts: (
    args?: {
      where?: PostWhereInput;
      orderBy?: PostOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Post>;
  postsConnection: (
    args?: {
      where?: PostWhereInput;
      orderBy?: PostOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => PostConnectionPromise;
  typeface: (where: TypefaceWhereUniqueInput) => TypefacePromise;
  typefaces: (
    args?: {
      where?: TypefaceWhereInput;
      orderBy?: TypefaceOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Typeface>;
  typefacesConnection: (
    args?: {
      where?: TypefaceWhereInput;
      orderBy?: TypefaceOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => TypefaceConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  website: (where: WebsiteWhereUniqueInput) => WebsitePromise;
  websites: (
    args?: {
      where?: WebsiteWhereInput;
      orderBy?: WebsiteOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Website>;
  websitesConnection: (
    args?: {
      where?: WebsiteWhereInput;
      orderBy?: WebsiteOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => WebsiteConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createFile: (data: FileCreateInput) => FilePromise;
  updateFile: (
    args: { data: FileUpdateInput; where: FileWhereUniqueInput }
  ) => FilePromise;
  updateManyFiles: (
    args: { data: FileUpdateManyMutationInput; where?: FileWhereInput }
  ) => BatchPayloadPromise;
  upsertFile: (
    args: {
      where: FileWhereUniqueInput;
      create: FileCreateInput;
      update: FileUpdateInput;
    }
  ) => FilePromise;
  deleteFile: (where: FileWhereUniqueInput) => FilePromise;
  deleteManyFiles: (where?: FileWhereInput) => BatchPayloadPromise;
  createFoundry: (data: FoundryCreateInput) => FoundryPromise;
  updateFoundry: (
    args: { data: FoundryUpdateInput; where: FoundryWhereUniqueInput }
  ) => FoundryPromise;
  updateManyFoundries: (
    args: { data: FoundryUpdateManyMutationInput; where?: FoundryWhereInput }
  ) => BatchPayloadPromise;
  upsertFoundry: (
    args: {
      where: FoundryWhereUniqueInput;
      create: FoundryCreateInput;
      update: FoundryUpdateInput;
    }
  ) => FoundryPromise;
  deleteFoundry: (where: FoundryWhereUniqueInput) => FoundryPromise;
  deleteManyFoundries: (where?: FoundryWhereInput) => BatchPayloadPromise;
  createPost: (data: PostCreateInput) => PostPromise;
  updatePost: (
    args: { data: PostUpdateInput; where: PostWhereUniqueInput }
  ) => PostPromise;
  updateManyPosts: (
    args: { data: PostUpdateManyMutationInput; where?: PostWhereInput }
  ) => BatchPayloadPromise;
  upsertPost: (
    args: {
      where: PostWhereUniqueInput;
      create: PostCreateInput;
      update: PostUpdateInput;
    }
  ) => PostPromise;
  deletePost: (where: PostWhereUniqueInput) => PostPromise;
  deleteManyPosts: (where?: PostWhereInput) => BatchPayloadPromise;
  createTypeface: (data: TypefaceCreateInput) => TypefacePromise;
  updateTypeface: (
    args: { data: TypefaceUpdateInput; where: TypefaceWhereUniqueInput }
  ) => TypefacePromise;
  updateManyTypefaces: (
    args: { data: TypefaceUpdateManyMutationInput; where?: TypefaceWhereInput }
  ) => BatchPayloadPromise;
  upsertTypeface: (
    args: {
      where: TypefaceWhereUniqueInput;
      create: TypefaceCreateInput;
      update: TypefaceUpdateInput;
    }
  ) => TypefacePromise;
  deleteTypeface: (where: TypefaceWhereUniqueInput) => TypefacePromise;
  deleteManyTypefaces: (where?: TypefaceWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;
  createWebsite: (data: WebsiteCreateInput) => WebsitePromise;
  updateWebsite: (
    args: { data: WebsiteUpdateInput; where: WebsiteWhereUniqueInput }
  ) => WebsitePromise;
  updateManyWebsites: (
    args: { data: WebsiteUpdateManyMutationInput; where?: WebsiteWhereInput }
  ) => BatchPayloadPromise;
  upsertWebsite: (
    args: {
      where: WebsiteWhereUniqueInput;
      create: WebsiteCreateInput;
      update: WebsiteUpdateInput;
    }
  ) => WebsitePromise;
  deleteWebsite: (where: WebsiteWhereUniqueInput) => WebsitePromise;
  deleteManyWebsites: (where?: WebsiteWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  file: (
    where?: FileSubscriptionWhereInput
  ) => FileSubscriptionPayloadSubscription;
  foundry: (
    where?: FoundrySubscriptionWhereInput
  ) => FoundrySubscriptionPayloadSubscription;
  post: (
    where?: PostSubscriptionWhereInput
  ) => PostSubscriptionPayloadSubscription;
  typeface: (
    where?: TypefaceSubscriptionWhereInput
  ) => TypefaceSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
  website: (
    where?: WebsiteSubscriptionWhereInput
  ) => WebsiteSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type Role = "ADMIN" | "SUBSCRIBER";

export type TypefaceOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "imageUrl_ASC"
  | "imageUrl_DESC"
  | "thumbnail_ASC"
  | "thumbnail_DESC"
  | "designer_ASC"
  | "designer_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type WebsiteOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "isPublished_ASC"
  | "isPublished_DESC"
  | "title_ASC"
  | "title_DESC"
  | "thumbnail_ASC"
  | "thumbnail_DESC"
  | "url_ASC"
  | "url_DESC"
  | "image_ASC"
  | "image_DESC"
  | "featured_ASC"
  | "featured_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type FileOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "filename_ASC"
  | "filename_DESC"
  | "mimetype_ASC"
  | "mimetype_DESC"
  | "encoding_ASC"
  | "encoding_DESC"
  | "url_ASC"
  | "url_DESC";

export type PostOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "isPublished_ASC"
  | "isPublished_DESC"
  | "title_ASC"
  | "title_DESC"
  | "text_ASC"
  | "text_DESC";

export type FoundryOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "url_ASC"
  | "url_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "name_ASC"
  | "name_DESC"
  | "role_ASC"
  | "role_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface TypefaceCreateManyWithoutUsedByInput {
  create?:
    | TypefaceCreateWithoutUsedByInput[]
    | TypefaceCreateWithoutUsedByInput;
  connect?: TypefaceWhereUniqueInput[] | TypefaceWhereUniqueInput;
}

export type FileWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  url?: String;
}>;

export interface TypefaceCreateManyWithoutFoundryInput {
  create?:
    | TypefaceCreateWithoutFoundryInput[]
    | TypefaceCreateWithoutFoundryInput;
  connect?: TypefaceWhereUniqueInput[] | TypefaceWhereUniqueInput;
}

export interface TypefaceUpdateManyWithoutUsedByInput {
  create?:
    | TypefaceCreateWithoutUsedByInput[]
    | TypefaceCreateWithoutUsedByInput;
  delete?: TypefaceWhereUniqueInput[] | TypefaceWhereUniqueInput;
  connect?: TypefaceWhereUniqueInput[] | TypefaceWhereUniqueInput;
  disconnect?: TypefaceWhereUniqueInput[] | TypefaceWhereUniqueInput;
  update?:
    | TypefaceUpdateWithWhereUniqueWithoutUsedByInput[]
    | TypefaceUpdateWithWhereUniqueWithoutUsedByInput;
  upsert?:
    | TypefaceUpsertWithWhereUniqueWithoutUsedByInput[]
    | TypefaceUpsertWithWhereUniqueWithoutUsedByInput;
}

export interface TypefaceCreateWithoutFoundryInput {
  name: String;
  usedBy?: WebsiteCreateManyWithoutTypefacesInput;
  imageUrl?: String;
  thumbnail?: String;
  addedBy: UserCreateOneWithoutTypefacesInput;
  designer?: String;
}

export interface TypefaceUpdateWithoutFoundryDataInput {
  name?: String;
  usedBy?: WebsiteUpdateManyWithoutTypefacesInput;
  imageUrl?: String;
  thumbnail?: String;
  addedBy?: UserUpdateOneRequiredWithoutTypefacesInput;
  designer?: String;
}

export interface WebsiteCreateManyWithoutTypefacesInput {
  create?:
    | WebsiteCreateWithoutTypefacesInput[]
    | WebsiteCreateWithoutTypefacesInput;
  connect?: WebsiteWhereUniqueInput[] | WebsiteWhereUniqueInput;
}

export type FoundryWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface WebsiteCreateWithoutTypefacesInput {
  isPublished?: Boolean;
  title: String;
  thumbnail: String;
  url: String;
  image: String;
  addedBy: UserCreateOneWithoutWebsitesInput;
  featured?: Boolean;
}

export interface TypefaceWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  usedBy_every?: WebsiteWhereInput;
  usedBy_some?: WebsiteWhereInput;
  usedBy_none?: WebsiteWhereInput;
  imageUrl?: String;
  imageUrl_not?: String;
  imageUrl_in?: String[] | String;
  imageUrl_not_in?: String[] | String;
  imageUrl_lt?: String;
  imageUrl_lte?: String;
  imageUrl_gt?: String;
  imageUrl_gte?: String;
  imageUrl_contains?: String;
  imageUrl_not_contains?: String;
  imageUrl_starts_with?: String;
  imageUrl_not_starts_with?: String;
  imageUrl_ends_with?: String;
  imageUrl_not_ends_with?: String;
  thumbnail?: String;
  thumbnail_not?: String;
  thumbnail_in?: String[] | String;
  thumbnail_not_in?: String[] | String;
  thumbnail_lt?: String;
  thumbnail_lte?: String;
  thumbnail_gt?: String;
  thumbnail_gte?: String;
  thumbnail_contains?: String;
  thumbnail_not_contains?: String;
  thumbnail_starts_with?: String;
  thumbnail_not_starts_with?: String;
  thumbnail_ends_with?: String;
  thumbnail_not_ends_with?: String;
  addedBy?: UserWhereInput;
  foundry?: FoundryWhereInput;
  designer?: String;
  designer_not?: String;
  designer_in?: String[] | String;
  designer_not_in?: String[] | String;
  designer_lt?: String;
  designer_lte?: String;
  designer_gt?: String;
  designer_gte?: String;
  designer_contains?: String;
  designer_not_contains?: String;
  designer_starts_with?: String;
  designer_not_starts_with?: String;
  designer_ends_with?: String;
  designer_not_ends_with?: String;
  AND?: TypefaceWhereInput[] | TypefaceWhereInput;
  OR?: TypefaceWhereInput[] | TypefaceWhereInput;
  NOT?: TypefaceWhereInput[] | TypefaceWhereInput;
}

export interface UserCreateOneWithoutWebsitesInput {
  create?: UserCreateWithoutWebsitesInput;
  connect?: UserWhereUniqueInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  role?: Role;
  role_not?: Role;
  role_in?: Role[] | Role;
  role_not_in?: Role[] | Role;
  posts_every?: PostWhereInput;
  posts_some?: PostWhereInput;
  posts_none?: PostWhereInput;
  websites_every?: WebsiteWhereInput;
  websites_some?: WebsiteWhereInput;
  websites_none?: WebsiteWhereInput;
  typefaces_every?: TypefaceWhereInput;
  typefaces_some?: TypefaceWhereInput;
  typefaces_none?: TypefaceWhereInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface UserCreateWithoutWebsitesInput {
  email: String;
  password: String;
  name: String;
  role?: Role;
  posts?: PostCreateManyWithoutAuthorInput;
  typefaces?: TypefaceCreateManyWithoutAddedByInput;
}

export interface PostWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  isPublished?: Boolean;
  isPublished_not?: Boolean;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  text?: String;
  text_not?: String;
  text_in?: String[] | String;
  text_not_in?: String[] | String;
  text_lt?: String;
  text_lte?: String;
  text_gt?: String;
  text_gte?: String;
  text_contains?: String;
  text_not_contains?: String;
  text_starts_with?: String;
  text_not_starts_with?: String;
  text_ends_with?: String;
  text_not_ends_with?: String;
  author?: UserWhereInput;
  AND?: PostWhereInput[] | PostWhereInput;
  OR?: PostWhereInput[] | PostWhereInput;
  NOT?: PostWhereInput[] | PostWhereInput;
}

export interface PostCreateManyWithoutAuthorInput {
  create?: PostCreateWithoutAuthorInput[] | PostCreateWithoutAuthorInput;
  connect?: PostWhereUniqueInput[] | PostWhereUniqueInput;
}

export interface PostSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: PostWhereInput;
  AND?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput;
  OR?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput;
  NOT?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput;
}

export interface PostCreateWithoutAuthorInput {
  isPublished?: Boolean;
  title: String;
  text: String;
}

export interface FileSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: FileWhereInput;
  AND?: FileSubscriptionWhereInput[] | FileSubscriptionWhereInput;
  OR?: FileSubscriptionWhereInput[] | FileSubscriptionWhereInput;
  NOT?: FileSubscriptionWhereInput[] | FileSubscriptionWhereInput;
}

export interface TypefaceCreateManyWithoutAddedByInput {
  create?:
    | TypefaceCreateWithoutAddedByInput[]
    | TypefaceCreateWithoutAddedByInput;
  connect?: TypefaceWhereUniqueInput[] | TypefaceWhereUniqueInput;
}

export interface WebsiteUpdateInput {
  isPublished?: Boolean;
  title?: String;
  thumbnail?: String;
  url?: String;
  image?: String;
  addedBy?: UserUpdateOneRequiredWithoutWebsitesInput;
  typefaces?: TypefaceUpdateManyWithoutUsedByInput;
  featured?: Boolean;
}

export interface TypefaceCreateWithoutAddedByInput {
  name: String;
  usedBy?: WebsiteCreateManyWithoutTypefacesInput;
  imageUrl?: String;
  thumbnail?: String;
  foundry?: FoundryCreateOneWithoutFontsInput;
  designer?: String;
}

export interface WebsiteCreateInput {
  isPublished?: Boolean;
  title: String;
  thumbnail: String;
  url: String;
  image: String;
  addedBy: UserCreateOneWithoutWebsitesInput;
  typefaces?: TypefaceCreateManyWithoutUsedByInput;
  featured?: Boolean;
}

export interface FoundryCreateOneWithoutFontsInput {
  create?: FoundryCreateWithoutFontsInput;
  connect?: FoundryWhereUniqueInput;
}

export interface UserUpdateInput {
  email?: String;
  password?: String;
  name?: String;
  role?: Role;
  posts?: PostUpdateManyWithoutAuthorInput;
  websites?: WebsiteUpdateManyWithoutAddedByInput;
  typefaces?: TypefaceUpdateManyWithoutAddedByInput;
}

export interface FoundryCreateWithoutFontsInput {
  name: String;
  url?: String;
}

export interface TypefaceUpdateManyMutationInput {
  name?: String;
  imageUrl?: String;
  thumbnail?: String;
  designer?: String;
}

export interface UserCreateOneWithoutTypefacesInput {
  create?: UserCreateWithoutTypefacesInput;
  connect?: UserWhereUniqueInput;
}

export interface TypefaceUpdateInput {
  name?: String;
  usedBy?: WebsiteUpdateManyWithoutTypefacesInput;
  imageUrl?: String;
  thumbnail?: String;
  addedBy?: UserUpdateOneRequiredWithoutTypefacesInput;
  foundry?: FoundryUpdateOneWithoutFontsInput;
  designer?: String;
}

export interface UserCreateWithoutTypefacesInput {
  email: String;
  password: String;
  name: String;
  role?: Role;
  posts?: PostCreateManyWithoutAuthorInput;
  websites?: WebsiteCreateManyWithoutAddedByInput;
}

export interface PostUpdateManyMutationInput {
  isPublished?: Boolean;
  title?: String;
  text?: String;
}

export interface WebsiteCreateManyWithoutAddedByInput {
  create?:
    | WebsiteCreateWithoutAddedByInput[]
    | WebsiteCreateWithoutAddedByInput;
  connect?: WebsiteWhereUniqueInput[] | WebsiteWhereUniqueInput;
}

export interface UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsDataInput;
  create: UserCreateWithoutPostsInput;
}

export interface WebsiteCreateWithoutAddedByInput {
  isPublished?: Boolean;
  title: String;
  thumbnail: String;
  url: String;
  image: String;
  typefaces?: TypefaceCreateManyWithoutUsedByInput;
  featured?: Boolean;
}

export interface UserUpdateOneRequiredWithoutPostsInput {
  create?: UserCreateWithoutPostsInput;
  update?: UserUpdateWithoutPostsDataInput;
  upsert?: UserUpsertWithoutPostsInput;
  connect?: UserWhereUniqueInput;
}

export interface TypefaceUpdateWithoutUsedByDataInput {
  name?: String;
  imageUrl?: String;
  thumbnail?: String;
  addedBy?: UserUpdateOneRequiredWithoutTypefacesInput;
  foundry?: FoundryUpdateOneWithoutFontsInput;
  designer?: String;
}

export interface PostUpdateInput {
  isPublished?: Boolean;
  title?: String;
  text?: String;
  author?: UserUpdateOneRequiredWithoutPostsInput;
}

export interface TypefaceCreateWithoutUsedByInput {
  name: String;
  imageUrl?: String;
  thumbnail?: String;
  addedBy: UserCreateOneWithoutTypefacesInput;
  foundry?: FoundryCreateOneWithoutFontsInput;
  designer?: String;
}

export interface UserCreateOneWithoutPostsInput {
  create?: UserCreateWithoutPostsInput;
  connect?: UserWhereUniqueInput;
}

export interface FoundryUpdateInput {
  name?: String;
  fonts?: TypefaceUpdateManyWithoutFoundryInput;
  url?: String;
}

export type WebsiteWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface TypefaceUpdateManyWithoutFoundryInput {
  create?:
    | TypefaceCreateWithoutFoundryInput[]
    | TypefaceCreateWithoutFoundryInput;
  delete?: TypefaceWhereUniqueInput[] | TypefaceWhereUniqueInput;
  connect?: TypefaceWhereUniqueInput[] | TypefaceWhereUniqueInput;
  disconnect?: TypefaceWhereUniqueInput[] | TypefaceWhereUniqueInput;
  update?:
    | TypefaceUpdateWithWhereUniqueWithoutFoundryInput[]
    | TypefaceUpdateWithWhereUniqueWithoutFoundryInput;
  upsert?:
    | TypefaceUpsertWithWhereUniqueWithoutFoundryInput[]
    | TypefaceUpsertWithWhereUniqueWithoutFoundryInput;
}

export interface TypefaceUpsertWithWhereUniqueWithoutFoundryInput {
  where: TypefaceWhereUniqueInput;
  update: TypefaceUpdateWithoutFoundryDataInput;
  create: TypefaceCreateWithoutFoundryInput;
}

export interface TypefaceUpdateWithWhereUniqueWithoutFoundryInput {
  where: TypefaceWhereUniqueInput;
  data: TypefaceUpdateWithoutFoundryDataInput;
}

export interface FileUpdateInput {
  filename?: String;
  mimetype?: String;
  encoding?: String;
  url?: String;
}

export interface TypefaceUpdateWithWhereUniqueWithoutUsedByInput {
  where: TypefaceWhereUniqueInput;
  data: TypefaceUpdateWithoutUsedByDataInput;
}

export interface WebsiteUpsertWithWhereUniqueWithoutAddedByInput {
  where: WebsiteWhereUniqueInput;
  update: WebsiteUpdateWithoutAddedByDataInput;
  create: WebsiteCreateWithoutAddedByInput;
}

export interface WebsiteUpdateManyWithoutTypefacesInput {
  create?:
    | WebsiteCreateWithoutTypefacesInput[]
    | WebsiteCreateWithoutTypefacesInput;
  delete?: WebsiteWhereUniqueInput[] | WebsiteWhereUniqueInput;
  connect?: WebsiteWhereUniqueInput[] | WebsiteWhereUniqueInput;
  disconnect?: WebsiteWhereUniqueInput[] | WebsiteWhereUniqueInput;
  update?:
    | WebsiteUpdateWithWhereUniqueWithoutTypefacesInput[]
    | WebsiteUpdateWithWhereUniqueWithoutTypefacesInput;
  upsert?:
    | WebsiteUpsertWithWhereUniqueWithoutTypefacesInput[]
    | WebsiteUpsertWithWhereUniqueWithoutTypefacesInput;
}

export interface FoundryCreateInput {
  name: String;
  fonts?: TypefaceCreateManyWithoutFoundryInput;
  url?: String;
}

export interface WebsiteUpdateWithWhereUniqueWithoutTypefacesInput {
  where: WebsiteWhereUniqueInput;
  data: WebsiteUpdateWithoutTypefacesDataInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface WebsiteUpdateWithoutTypefacesDataInput {
  isPublished?: Boolean;
  title?: String;
  thumbnail?: String;
  url?: String;
  image?: String;
  addedBy?: UserUpdateOneRequiredWithoutWebsitesInput;
  featured?: Boolean;
}

export interface TypefaceSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: TypefaceWhereInput;
  AND?: TypefaceSubscriptionWhereInput[] | TypefaceSubscriptionWhereInput;
  OR?: TypefaceSubscriptionWhereInput[] | TypefaceSubscriptionWhereInput;
  NOT?: TypefaceSubscriptionWhereInput[] | TypefaceSubscriptionWhereInput;
}

export interface UserUpdateOneRequiredWithoutWebsitesInput {
  create?: UserCreateWithoutWebsitesInput;
  update?: UserUpdateWithoutWebsitesDataInput;
  upsert?: UserUpsertWithoutWebsitesInput;
  connect?: UserWhereUniqueInput;
}

export interface FoundrySubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: FoundryWhereInput;
  AND?: FoundrySubscriptionWhereInput[] | FoundrySubscriptionWhereInput;
  OR?: FoundrySubscriptionWhereInput[] | FoundrySubscriptionWhereInput;
  NOT?: FoundrySubscriptionWhereInput[] | FoundrySubscriptionWhereInput;
}

export interface UserUpdateWithoutWebsitesDataInput {
  email?: String;
  password?: String;
  name?: String;
  role?: Role;
  posts?: PostUpdateManyWithoutAuthorInput;
  typefaces?: TypefaceUpdateManyWithoutAddedByInput;
}

export interface FileWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  filename?: String;
  filename_not?: String;
  filename_in?: String[] | String;
  filename_not_in?: String[] | String;
  filename_lt?: String;
  filename_lte?: String;
  filename_gt?: String;
  filename_gte?: String;
  filename_contains?: String;
  filename_not_contains?: String;
  filename_starts_with?: String;
  filename_not_starts_with?: String;
  filename_ends_with?: String;
  filename_not_ends_with?: String;
  mimetype?: String;
  mimetype_not?: String;
  mimetype_in?: String[] | String;
  mimetype_not_in?: String[] | String;
  mimetype_lt?: String;
  mimetype_lte?: String;
  mimetype_gt?: String;
  mimetype_gte?: String;
  mimetype_contains?: String;
  mimetype_not_contains?: String;
  mimetype_starts_with?: String;
  mimetype_not_starts_with?: String;
  mimetype_ends_with?: String;
  mimetype_not_ends_with?: String;
  encoding?: String;
  encoding_not?: String;
  encoding_in?: String[] | String;
  encoding_not_in?: String[] | String;
  encoding_lt?: String;
  encoding_lte?: String;
  encoding_gt?: String;
  encoding_gte?: String;
  encoding_contains?: String;
  encoding_not_contains?: String;
  encoding_starts_with?: String;
  encoding_not_starts_with?: String;
  encoding_ends_with?: String;
  encoding_not_ends_with?: String;
  url?: String;
  url_not?: String;
  url_in?: String[] | String;
  url_not_in?: String[] | String;
  url_lt?: String;
  url_lte?: String;
  url_gt?: String;
  url_gte?: String;
  url_contains?: String;
  url_not_contains?: String;
  url_starts_with?: String;
  url_not_starts_with?: String;
  url_ends_with?: String;
  url_not_ends_with?: String;
  AND?: FileWhereInput[] | FileWhereInput;
  OR?: FileWhereInput[] | FileWhereInput;
  NOT?: FileWhereInput[] | FileWhereInput;
}

export interface PostUpdateManyWithoutAuthorInput {
  create?: PostCreateWithoutAuthorInput[] | PostCreateWithoutAuthorInput;
  delete?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  connect?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  disconnect?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  update?:
    | PostUpdateWithWhereUniqueWithoutAuthorInput[]
    | PostUpdateWithWhereUniqueWithoutAuthorInput;
  upsert?:
    | PostUpsertWithWhereUniqueWithoutAuthorInput[]
    | PostUpsertWithWhereUniqueWithoutAuthorInput;
}

export interface UserCreateInput {
  email: String;
  password: String;
  name: String;
  role?: Role;
  posts?: PostCreateManyWithoutAuthorInput;
  websites?: WebsiteCreateManyWithoutAddedByInput;
  typefaces?: TypefaceCreateManyWithoutAddedByInput;
}

export interface PostUpdateWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput;
  data: PostUpdateWithoutAuthorDataInput;
}

export interface TypefaceCreateInput {
  name: String;
  usedBy?: WebsiteCreateManyWithoutTypefacesInput;
  imageUrl?: String;
  thumbnail?: String;
  addedBy: UserCreateOneWithoutTypefacesInput;
  foundry?: FoundryCreateOneWithoutFontsInput;
  designer?: String;
}

export interface PostUpdateWithoutAuthorDataInput {
  isPublished?: Boolean;
  title?: String;
  text?: String;
}

export interface UserUpdateWithoutPostsDataInput {
  email?: String;
  password?: String;
  name?: String;
  role?: Role;
  websites?: WebsiteUpdateManyWithoutAddedByInput;
  typefaces?: TypefaceUpdateManyWithoutAddedByInput;
}

export interface PostUpsertWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput;
  update: PostUpdateWithoutAuthorDataInput;
  create: PostCreateWithoutAuthorInput;
}

export interface UserCreateWithoutPostsInput {
  email: String;
  password: String;
  name: String;
  role?: Role;
  websites?: WebsiteCreateManyWithoutAddedByInput;
  typefaces?: TypefaceCreateManyWithoutAddedByInput;
}

export interface TypefaceUpdateManyWithoutAddedByInput {
  create?:
    | TypefaceCreateWithoutAddedByInput[]
    | TypefaceCreateWithoutAddedByInput;
  delete?: TypefaceWhereUniqueInput[] | TypefaceWhereUniqueInput;
  connect?: TypefaceWhereUniqueInput[] | TypefaceWhereUniqueInput;
  disconnect?: TypefaceWhereUniqueInput[] | TypefaceWhereUniqueInput;
  update?:
    | TypefaceUpdateWithWhereUniqueWithoutAddedByInput[]
    | TypefaceUpdateWithWhereUniqueWithoutAddedByInput;
  upsert?:
    | TypefaceUpsertWithWhereUniqueWithoutAddedByInput[]
    | TypefaceUpsertWithWhereUniqueWithoutAddedByInput;
}

export interface FoundryUpdateManyMutationInput {
  name?: String;
  url?: String;
}

export interface TypefaceUpdateWithWhereUniqueWithoutAddedByInput {
  where: TypefaceWhereUniqueInput;
  data: TypefaceUpdateWithoutAddedByDataInput;
}

export interface FileCreateInput {
  filename: String;
  mimetype: String;
  encoding: String;
  url: String;
}

export interface TypefaceUpdateWithoutAddedByDataInput {
  name?: String;
  usedBy?: WebsiteUpdateManyWithoutTypefacesInput;
  imageUrl?: String;
  thumbnail?: String;
  foundry?: FoundryUpdateOneWithoutFontsInput;
  designer?: String;
}

export interface TypefaceUpsertWithWhereUniqueWithoutUsedByInput {
  where: TypefaceWhereUniqueInput;
  update: TypefaceUpdateWithoutUsedByDataInput;
  create: TypefaceCreateWithoutUsedByInput;
}

export interface FoundryUpdateOneWithoutFontsInput {
  create?: FoundryCreateWithoutFontsInput;
  update?: FoundryUpdateWithoutFontsDataInput;
  upsert?: FoundryUpsertWithoutFontsInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: FoundryWhereUniqueInput;
}

export interface WebsiteWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  isPublished?: Boolean;
  isPublished_not?: Boolean;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  thumbnail?: String;
  thumbnail_not?: String;
  thumbnail_in?: String[] | String;
  thumbnail_not_in?: String[] | String;
  thumbnail_lt?: String;
  thumbnail_lte?: String;
  thumbnail_gt?: String;
  thumbnail_gte?: String;
  thumbnail_contains?: String;
  thumbnail_not_contains?: String;
  thumbnail_starts_with?: String;
  thumbnail_not_starts_with?: String;
  thumbnail_ends_with?: String;
  thumbnail_not_ends_with?: String;
  url?: String;
  url_not?: String;
  url_in?: String[] | String;
  url_not_in?: String[] | String;
  url_lt?: String;
  url_lte?: String;
  url_gt?: String;
  url_gte?: String;
  url_contains?: String;
  url_not_contains?: String;
  url_starts_with?: String;
  url_not_starts_with?: String;
  url_ends_with?: String;
  url_not_ends_with?: String;
  image?: String;
  image_not?: String;
  image_in?: String[] | String;
  image_not_in?: String[] | String;
  image_lt?: String;
  image_lte?: String;
  image_gt?: String;
  image_gte?: String;
  image_contains?: String;
  image_not_contains?: String;
  image_starts_with?: String;
  image_not_starts_with?: String;
  image_ends_with?: String;
  image_not_ends_with?: String;
  addedBy?: UserWhereInput;
  typefaces_every?: TypefaceWhereInput;
  typefaces_some?: TypefaceWhereInput;
  typefaces_none?: TypefaceWhereInput;
  featured?: Boolean;
  featured_not?: Boolean;
  AND?: WebsiteWhereInput[] | WebsiteWhereInput;
  OR?: WebsiteWhereInput[] | WebsiteWhereInput;
  NOT?: WebsiteWhereInput[] | WebsiteWhereInput;
}

export interface FoundryUpdateWithoutFontsDataInput {
  name?: String;
  url?: String;
}

export interface WebsiteUpdateManyMutationInput {
  isPublished?: Boolean;
  title?: String;
  thumbnail?: String;
  url?: String;
  image?: String;
  featured?: Boolean;
}

export interface FoundryUpsertWithoutFontsInput {
  update: FoundryUpdateWithoutFontsDataInput;
  create: FoundryCreateWithoutFontsInput;
}

export type PostWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface TypefaceUpsertWithWhereUniqueWithoutAddedByInput {
  where: TypefaceWhereUniqueInput;
  update: TypefaceUpdateWithoutAddedByDataInput;
  create: TypefaceCreateWithoutAddedByInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
}>;

export interface UserUpsertWithoutWebsitesInput {
  update: UserUpdateWithoutWebsitesDataInput;
  create: UserCreateWithoutWebsitesInput;
}

export interface UserUpsertWithoutTypefacesInput {
  update: UserUpdateWithoutTypefacesDataInput;
  create: UserCreateWithoutTypefacesInput;
}

export interface WebsiteUpsertWithWhereUniqueWithoutTypefacesInput {
  where: WebsiteWhereUniqueInput;
  update: WebsiteUpdateWithoutTypefacesDataInput;
  create: WebsiteCreateWithoutTypefacesInput;
}

export interface WebsiteSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: WebsiteWhereInput;
  AND?: WebsiteSubscriptionWhereInput[] | WebsiteSubscriptionWhereInput;
  OR?: WebsiteSubscriptionWhereInput[] | WebsiteSubscriptionWhereInput;
  NOT?: WebsiteSubscriptionWhereInput[] | WebsiteSubscriptionWhereInput;
}

export interface UserUpdateOneRequiredWithoutTypefacesInput {
  create?: UserCreateWithoutTypefacesInput;
  update?: UserUpdateWithoutTypefacesDataInput;
  upsert?: UserUpsertWithoutTypefacesInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateManyMutationInput {
  email?: String;
  password?: String;
  name?: String;
  role?: Role;
}

export interface WebsiteUpdateWithoutAddedByDataInput {
  isPublished?: Boolean;
  title?: String;
  thumbnail?: String;
  url?: String;
  image?: String;
  typefaces?: TypefaceUpdateManyWithoutUsedByInput;
  featured?: Boolean;
}

export interface WebsiteUpdateWithWhereUniqueWithoutAddedByInput {
  where: WebsiteWhereUniqueInput;
  data: WebsiteUpdateWithoutAddedByDataInput;
}

export interface WebsiteUpdateManyWithoutAddedByInput {
  create?:
    | WebsiteCreateWithoutAddedByInput[]
    | WebsiteCreateWithoutAddedByInput;
  delete?: WebsiteWhereUniqueInput[] | WebsiteWhereUniqueInput;
  connect?: WebsiteWhereUniqueInput[] | WebsiteWhereUniqueInput;
  disconnect?: WebsiteWhereUniqueInput[] | WebsiteWhereUniqueInput;
  update?:
    | WebsiteUpdateWithWhereUniqueWithoutAddedByInput[]
    | WebsiteUpdateWithWhereUniqueWithoutAddedByInput;
  upsert?:
    | WebsiteUpsertWithWhereUniqueWithoutAddedByInput[]
    | WebsiteUpsertWithWhereUniqueWithoutAddedByInput;
}

export interface UserUpdateWithoutTypefacesDataInput {
  email?: String;
  password?: String;
  name?: String;
  role?: Role;
  posts?: PostUpdateManyWithoutAuthorInput;
  websites?: WebsiteUpdateManyWithoutAddedByInput;
}

export type TypefaceWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface FoundryWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  fonts_every?: TypefaceWhereInput;
  fonts_some?: TypefaceWhereInput;
  fonts_none?: TypefaceWhereInput;
  url?: String;
  url_not?: String;
  url_in?: String[] | String;
  url_not_in?: String[] | String;
  url_lt?: String;
  url_lte?: String;
  url_gt?: String;
  url_gte?: String;
  url_contains?: String;
  url_not_contains?: String;
  url_starts_with?: String;
  url_not_starts_with?: String;
  url_ends_with?: String;
  url_not_ends_with?: String;
  AND?: FoundryWhereInput[] | FoundryWhereInput;
  OR?: FoundryWhereInput[] | FoundryWhereInput;
  NOT?: FoundryWhereInput[] | FoundryWhereInput;
}

export interface FileUpdateManyMutationInput {
  filename?: String;
  mimetype?: String;
  encoding?: String;
  url?: String;
}

export interface PostCreateInput {
  isPublished?: Boolean;
  title: String;
  text: String;
  author: UserCreateOneWithoutPostsInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface WebsitePreviousValues {
  id: ID_Output;
  isPublished: Boolean;
  title: String;
  thumbnail: String;
  url: String;
  image: String;
  featured: Boolean;
}

export interface WebsitePreviousValuesPromise
  extends Promise<WebsitePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  isPublished: () => Promise<Boolean>;
  title: () => Promise<String>;
  thumbnail: () => Promise<String>;
  url: () => Promise<String>;
  image: () => Promise<String>;
  featured: () => Promise<Boolean>;
}

export interface WebsitePreviousValuesSubscription
  extends Promise<AsyncIterator<WebsitePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  isPublished: () => Promise<AsyncIterator<Boolean>>;
  title: () => Promise<AsyncIterator<String>>;
  thumbnail: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
  featured: () => Promise<AsyncIterator<Boolean>>;
}

export interface Post {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  isPublished: Boolean;
  title: String;
  text: String;
}

export interface PostPromise extends Promise<Post>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  isPublished: () => Promise<Boolean>;
  title: () => Promise<String>;
  text: () => Promise<String>;
  author: <T = UserPromise>() => T;
}

export interface PostSubscription
  extends Promise<AsyncIterator<Post>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  isPublished: () => Promise<AsyncIterator<Boolean>>;
  title: () => Promise<AsyncIterator<String>>;
  text: () => Promise<AsyncIterator<String>>;
  author: <T = UserSubscription>() => T;
}

export interface FileEdge {
  cursor: String;
}

export interface FileEdgePromise extends Promise<FileEdge>, Fragmentable {
  node: <T = FilePromise>() => T;
  cursor: () => Promise<String>;
}

export interface FileEdgeSubscription
  extends Promise<AsyncIterator<FileEdge>>,
    Fragmentable {
  node: <T = FileSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface WebsiteSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface WebsiteSubscriptionPayloadPromise
  extends Promise<WebsiteSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = WebsitePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = WebsitePreviousValuesPromise>() => T;
}

export interface WebsiteSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<WebsiteSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = WebsiteSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = WebsitePreviousValuesSubscription>() => T;
}

export interface Foundry {
  id: ID_Output;
  name: String;
  url?: String;
}

export interface FoundryPromise extends Promise<Foundry>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  fonts: <T = FragmentableArray<Typeface>>(
    args?: {
      where?: TypefaceWhereInput;
      orderBy?: TypefaceOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  url: () => Promise<String>;
}

export interface FoundrySubscription
  extends Promise<AsyncIterator<Foundry>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  fonts: <T = Promise<AsyncIterator<TypefaceSubscription>>>(
    args?: {
      where?: TypefaceWhereInput;
      orderBy?: TypefaceOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  url: () => Promise<AsyncIterator<String>>;
}

export interface AggregateFile {
  count: Int;
}

export interface AggregateFilePromise
  extends Promise<AggregateFile>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateFileSubscription
  extends Promise<AsyncIterator<AggregateFile>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface User {
  id: ID_Output;
  email: String;
  password: String;
  name: String;
  role: Role;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  name: () => Promise<String>;
  role: () => Promise<Role>;
  posts: <T = FragmentableArray<Post>>(
    args?: {
      where?: PostWhereInput;
      orderBy?: PostOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  websites: <T = FragmentableArray<Website>>(
    args?: {
      where?: WebsiteWhereInput;
      orderBy?: WebsiteOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  typefaces: <T = FragmentableArray<Typeface>>(
    args?: {
      where?: TypefaceWhereInput;
      orderBy?: TypefaceOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  role: () => Promise<AsyncIterator<Role>>;
  posts: <T = Promise<AsyncIterator<PostSubscription>>>(
    args?: {
      where?: PostWhereInput;
      orderBy?: PostOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  websites: <T = Promise<AsyncIterator<WebsiteSubscription>>>(
    args?: {
      where?: WebsiteWhereInput;
      orderBy?: WebsiteOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  typefaces: <T = Promise<AsyncIterator<TypefaceSubscription>>>(
    args?: {
      where?: TypefaceWhereInput;
      orderBy?: TypefaceOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface WebsiteEdge {
  cursor: String;
}

export interface WebsiteEdgePromise extends Promise<WebsiteEdge>, Fragmentable {
  node: <T = WebsitePromise>() => T;
  cursor: () => Promise<String>;
}

export interface WebsiteEdgeSubscription
  extends Promise<AsyncIterator<WebsiteEdge>>,
    Fragmentable {
  node: <T = WebsiteSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Website {
  id: ID_Output;
  isPublished: Boolean;
  title: String;
  thumbnail: String;
  url: String;
  image: String;
  featured: Boolean;
}

export interface WebsitePromise extends Promise<Website>, Fragmentable {
  id: () => Promise<ID_Output>;
  isPublished: () => Promise<Boolean>;
  title: () => Promise<String>;
  thumbnail: () => Promise<String>;
  url: () => Promise<String>;
  image: () => Promise<String>;
  addedBy: <T = UserPromise>() => T;
  typefaces: <T = FragmentableArray<Typeface>>(
    args?: {
      where?: TypefaceWhereInput;
      orderBy?: TypefaceOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  featured: () => Promise<Boolean>;
}

export interface WebsiteSubscription
  extends Promise<AsyncIterator<Website>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  isPublished: () => Promise<AsyncIterator<Boolean>>;
  title: () => Promise<AsyncIterator<String>>;
  thumbnail: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
  addedBy: <T = UserSubscription>() => T;
  typefaces: <T = Promise<AsyncIterator<TypefaceSubscription>>>(
    args?: {
      where?: TypefaceWhereInput;
      orderBy?: TypefaceOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  featured: () => Promise<AsyncIterator<Boolean>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserPreviousValues {
  id: ID_Output;
  email: String;
  password: String;
  name: String;
  role: Role;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  name: () => Promise<String>;
  role: () => Promise<Role>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  role: () => Promise<AsyncIterator<Role>>;
}

export interface UserConnection {}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface AggregateTypeface {
  count: Int;
}

export interface AggregateTypefacePromise
  extends Promise<AggregateTypeface>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTypefaceSubscription
  extends Promise<AsyncIterator<AggregateTypeface>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface FileSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface FileSubscriptionPayloadPromise
  extends Promise<FileSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = FilePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = FilePreviousValuesPromise>() => T;
}

export interface FileSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<FileSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = FileSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = FilePreviousValuesSubscription>() => T;
}

export interface TypefaceConnection {}

export interface TypefaceConnectionPromise
  extends Promise<TypefaceConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TypefaceEdge>>() => T;
  aggregate: <T = AggregateTypefacePromise>() => T;
}

export interface TypefaceConnectionSubscription
  extends Promise<AsyncIterator<TypefaceConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TypefaceEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTypefaceSubscription>() => T;
}

export interface FilePreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  filename: String;
  mimetype: String;
  encoding: String;
  url: String;
}

export interface FilePreviousValuesPromise
  extends Promise<FilePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  filename: () => Promise<String>;
  mimetype: () => Promise<String>;
  encoding: () => Promise<String>;
  url: () => Promise<String>;
}

export interface FilePreviousValuesSubscription
  extends Promise<AsyncIterator<FilePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  filename: () => Promise<AsyncIterator<String>>;
  mimetype: () => Promise<AsyncIterator<String>>;
  encoding: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
}

export interface PostEdge {
  cursor: String;
}

export interface PostEdgePromise extends Promise<PostEdge>, Fragmentable {
  node: <T = PostPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PostEdgeSubscription
  extends Promise<AsyncIterator<PostEdge>>,
    Fragmentable {
  node: <T = PostSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Typeface {
  id: ID_Output;
  name: String;
  imageUrl?: String;
  thumbnail?: String;
  designer?: String;
}

export interface TypefacePromise extends Promise<Typeface>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  usedBy: <T = FragmentableArray<Website>>(
    args?: {
      where?: WebsiteWhereInput;
      orderBy?: WebsiteOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  imageUrl: () => Promise<String>;
  thumbnail: () => Promise<String>;
  addedBy: <T = UserPromise>() => T;
  foundry: <T = FoundryPromise>() => T;
  designer: () => Promise<String>;
}

export interface TypefaceSubscription
  extends Promise<AsyncIterator<Typeface>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  usedBy: <T = Promise<AsyncIterator<WebsiteSubscription>>>(
    args?: {
      where?: WebsiteWhereInput;
      orderBy?: WebsiteOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  imageUrl: () => Promise<AsyncIterator<String>>;
  thumbnail: () => Promise<AsyncIterator<String>>;
  addedBy: <T = UserSubscription>() => T;
  foundry: <T = FoundrySubscription>() => T;
  designer: () => Promise<AsyncIterator<String>>;
}

export interface AggregateFoundry {
  count: Int;
}

export interface AggregateFoundryPromise
  extends Promise<AggregateFoundry>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateFoundrySubscription
  extends Promise<AsyncIterator<AggregateFoundry>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface FoundrySubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface FoundrySubscriptionPayloadPromise
  extends Promise<FoundrySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = FoundryPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = FoundryPreviousValuesPromise>() => T;
}

export interface FoundrySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<FoundrySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = FoundrySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = FoundryPreviousValuesSubscription>() => T;
}

export interface FoundryConnection {}

export interface FoundryConnectionPromise
  extends Promise<FoundryConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<FoundryEdge>>() => T;
  aggregate: <T = AggregateFoundryPromise>() => T;
}

export interface FoundryConnectionSubscription
  extends Promise<AsyncIterator<FoundryConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<FoundryEdgeSubscription>>>() => T;
  aggregate: <T = AggregateFoundrySubscription>() => T;
}

export interface FoundryPreviousValues {
  id: ID_Output;
  name: String;
  url?: String;
}

export interface FoundryPreviousValuesPromise
  extends Promise<FoundryPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  url: () => Promise<String>;
}

export interface FoundryPreviousValuesSubscription
  extends Promise<AsyncIterator<FoundryPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
}

export interface WebsiteConnection {}

export interface WebsiteConnectionPromise
  extends Promise<WebsiteConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<WebsiteEdge>>() => T;
  aggregate: <T = AggregateWebsitePromise>() => T;
}

export interface WebsiteConnectionSubscription
  extends Promise<AsyncIterator<WebsiteConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<WebsiteEdgeSubscription>>>() => T;
  aggregate: <T = AggregateWebsiteSubscription>() => T;
}

export interface FileConnection {}

export interface FileConnectionPromise
  extends Promise<FileConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<FileEdge>>() => T;
  aggregate: <T = AggregateFilePromise>() => T;
}

export interface FileConnectionSubscription
  extends Promise<AsyncIterator<FileConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<FileEdgeSubscription>>>() => T;
  aggregate: <T = AggregateFileSubscription>() => T;
}

export interface File {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  filename: String;
  mimetype: String;
  encoding: String;
  url: String;
}

export interface FilePromise extends Promise<File>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  filename: () => Promise<String>;
  mimetype: () => Promise<String>;
  encoding: () => Promise<String>;
  url: () => Promise<String>;
}

export interface FileSubscription
  extends Promise<AsyncIterator<File>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  filename: () => Promise<AsyncIterator<String>>;
  mimetype: () => Promise<AsyncIterator<String>>;
  encoding: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
}

export interface PostSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface PostSubscriptionPayloadPromise
  extends Promise<PostSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PostPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PostPreviousValuesPromise>() => T;
}

export interface PostSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PostSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PostSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PostPreviousValuesSubscription>() => T;
}

export interface AggregatePost {
  count: Int;
}

export interface AggregatePostPromise
  extends Promise<AggregatePost>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePostSubscription
  extends Promise<AsyncIterator<AggregatePost>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface FoundryEdge {
  cursor: String;
}

export interface FoundryEdgePromise extends Promise<FoundryEdge>, Fragmentable {
  node: <T = FoundryPromise>() => T;
  cursor: () => Promise<String>;
}

export interface FoundryEdgeSubscription
  extends Promise<AsyncIterator<FoundryEdge>>,
    Fragmentable {
  node: <T = FoundrySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface TypefacePreviousValues {
  id: ID_Output;
  name: String;
  imageUrl?: String;
  thumbnail?: String;
  designer?: String;
}

export interface TypefacePreviousValuesPromise
  extends Promise<TypefacePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  imageUrl: () => Promise<String>;
  thumbnail: () => Promise<String>;
  designer: () => Promise<String>;
}

export interface TypefacePreviousValuesSubscription
  extends Promise<AsyncIterator<TypefacePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  imageUrl: () => Promise<AsyncIterator<String>>;
  thumbnail: () => Promise<AsyncIterator<String>>;
  designer: () => Promise<AsyncIterator<String>>;
}

export interface TypefaceSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface TypefaceSubscriptionPayloadPromise
  extends Promise<TypefaceSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TypefacePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TypefacePreviousValuesPromise>() => T;
}

export interface TypefaceSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TypefaceSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TypefaceSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TypefacePreviousValuesSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface PostPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  isPublished: Boolean;
  title: String;
  text: String;
}

export interface PostPreviousValuesPromise
  extends Promise<PostPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  isPublished: () => Promise<Boolean>;
  title: () => Promise<String>;
  text: () => Promise<String>;
}

export interface PostPreviousValuesSubscription
  extends Promise<AsyncIterator<PostPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  isPublished: () => Promise<AsyncIterator<Boolean>>;
  title: () => Promise<AsyncIterator<String>>;
  text: () => Promise<AsyncIterator<String>>;
}

export interface AggregateWebsite {
  count: Int;
}

export interface AggregateWebsitePromise
  extends Promise<AggregateWebsite>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateWebsiteSubscription
  extends Promise<AsyncIterator<AggregateWebsite>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PostConnection {}

export interface PostConnectionPromise
  extends Promise<PostConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PostEdge>>() => T;
  aggregate: <T = AggregatePostPromise>() => T;
}

export interface PostConnectionSubscription
  extends Promise<AsyncIterator<PostConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PostEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePostSubscription>() => T;
}

export interface TypefaceEdge {
  cursor: String;
}

export interface TypefaceEdgePromise
  extends Promise<TypefaceEdge>,
    Fragmentable {
  node: <T = TypefacePromise>() => T;
  cursor: () => Promise<String>;
}

export interface TypefaceEdgeSubscription
  extends Promise<AsyncIterator<TypefaceEdge>>,
    Fragmentable {
  node: <T = TypefaceSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserEdge {
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Model Metadata
 */

export const models = [
  {
    name: "File",
    embedded: false
  },
  {
    name: "Foundry",
    embedded: false
  },
  {
    name: "Post",
    embedded: false
  },
  {
    name: "Role",
    embedded: false
  },
  {
    name: "Typeface",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "Website",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `${process.env["PRISMA_ENDPOINT"]}`,
  secret: `${process.env["PRISMA_SECRET"]}`
});
export const prisma = new Prisma();
