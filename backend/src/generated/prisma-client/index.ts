// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  designer: (where?: DesignerWhereInput) => Promise<boolean>;
  file: (where?: FileWhereInput) => Promise<boolean>;
  foundry: (where?: FoundryWhereInput) => Promise<boolean>;
  images: (where?: ImagesWhereInput) => Promise<boolean>;
  tag: (where?: TagWhereInput) => Promise<boolean>;
  typeface: (where?: TypefaceWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
  website: (where?: WebsiteWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  designer: (where: DesignerWhereUniqueInput) => DesignerNullablePromise;
  designers: (args?: {
    where?: DesignerWhereInput;
    orderBy?: DesignerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Designer>;
  designersConnection: (args?: {
    where?: DesignerWhereInput;
    orderBy?: DesignerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => DesignerConnectionPromise;
  file: (where: FileWhereUniqueInput) => FileNullablePromise;
  files: (args?: {
    where?: FileWhereInput;
    orderBy?: FileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<File>;
  filesConnection: (args?: {
    where?: FileWhereInput;
    orderBy?: FileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FileConnectionPromise;
  foundry: (where: FoundryWhereUniqueInput) => FoundryNullablePromise;
  foundries: (args?: {
    where?: FoundryWhereInput;
    orderBy?: FoundryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Foundry>;
  foundriesConnection: (args?: {
    where?: FoundryWhereInput;
    orderBy?: FoundryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FoundryConnectionPromise;
  images: (where: ImagesWhereUniqueInput) => ImagesNullablePromise;
  imageses: (args?: {
    where?: ImagesWhereInput;
    orderBy?: ImagesOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Images>;
  imagesesConnection: (args?: {
    where?: ImagesWhereInput;
    orderBy?: ImagesOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ImagesConnectionPromise;
  tag: (where: TagWhereUniqueInput) => TagNullablePromise;
  tags: (args?: {
    where?: TagWhereInput;
    orderBy?: TagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Tag>;
  tagsConnection: (args?: {
    where?: TagWhereInput;
    orderBy?: TagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => TagConnectionPromise;
  typeface: (where: TypefaceWhereUniqueInput) => TypefaceNullablePromise;
  typefaces: (args?: {
    where?: TypefaceWhereInput;
    orderBy?: TypefaceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Typeface>;
  typefacesConnection: (args?: {
    where?: TypefaceWhereInput;
    orderBy?: TypefaceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => TypefaceConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  website: (where: WebsiteWhereUniqueInput) => WebsiteNullablePromise;
  websites: (args?: {
    where?: WebsiteWhereInput;
    orderBy?: WebsiteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Website>;
  websitesConnection: (args?: {
    where?: WebsiteWhereInput;
    orderBy?: WebsiteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => WebsiteConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createDesigner: (data: DesignerCreateInput) => DesignerPromise;
  updateDesigner: (args: {
    data: DesignerUpdateInput;
    where: DesignerWhereUniqueInput;
  }) => DesignerPromise;
  updateManyDesigners: (args: {
    data: DesignerUpdateManyMutationInput;
    where?: DesignerWhereInput;
  }) => BatchPayloadPromise;
  upsertDesigner: (args: {
    where: DesignerWhereUniqueInput;
    create: DesignerCreateInput;
    update: DesignerUpdateInput;
  }) => DesignerPromise;
  deleteDesigner: (where: DesignerWhereUniqueInput) => DesignerPromise;
  deleteManyDesigners: (where?: DesignerWhereInput) => BatchPayloadPromise;
  createFile: (data: FileCreateInput) => FilePromise;
  updateFile: (args: {
    data: FileUpdateInput;
    where: FileWhereUniqueInput;
  }) => FilePromise;
  updateManyFiles: (args: {
    data: FileUpdateManyMutationInput;
    where?: FileWhereInput;
  }) => BatchPayloadPromise;
  upsertFile: (args: {
    where: FileWhereUniqueInput;
    create: FileCreateInput;
    update: FileUpdateInput;
  }) => FilePromise;
  deleteFile: (where: FileWhereUniqueInput) => FilePromise;
  deleteManyFiles: (where?: FileWhereInput) => BatchPayloadPromise;
  createFoundry: (data: FoundryCreateInput) => FoundryPromise;
  updateFoundry: (args: {
    data: FoundryUpdateInput;
    where: FoundryWhereUniqueInput;
  }) => FoundryPromise;
  updateManyFoundries: (args: {
    data: FoundryUpdateManyMutationInput;
    where?: FoundryWhereInput;
  }) => BatchPayloadPromise;
  upsertFoundry: (args: {
    where: FoundryWhereUniqueInput;
    create: FoundryCreateInput;
    update: FoundryUpdateInput;
  }) => FoundryPromise;
  deleteFoundry: (where: FoundryWhereUniqueInput) => FoundryPromise;
  deleteManyFoundries: (where?: FoundryWhereInput) => BatchPayloadPromise;
  createImages: (data: ImagesCreateInput) => ImagesPromise;
  updateImages: (args: {
    data: ImagesUpdateInput;
    where: ImagesWhereUniqueInput;
  }) => ImagesPromise;
  upsertImages: (args: {
    where: ImagesWhereUniqueInput;
    create: ImagesCreateInput;
    update: ImagesUpdateInput;
  }) => ImagesPromise;
  deleteImages: (where: ImagesWhereUniqueInput) => ImagesPromise;
  deleteManyImageses: (where?: ImagesWhereInput) => BatchPayloadPromise;
  createTag: (data: TagCreateInput) => TagPromise;
  updateTag: (args: {
    data: TagUpdateInput;
    where: TagWhereUniqueInput;
  }) => TagPromise;
  updateManyTags: (args: {
    data: TagUpdateManyMutationInput;
    where?: TagWhereInput;
  }) => BatchPayloadPromise;
  upsertTag: (args: {
    where: TagWhereUniqueInput;
    create: TagCreateInput;
    update: TagUpdateInput;
  }) => TagPromise;
  deleteTag: (where: TagWhereUniqueInput) => TagPromise;
  deleteManyTags: (where?: TagWhereInput) => BatchPayloadPromise;
  createTypeface: (data: TypefaceCreateInput) => TypefacePromise;
  updateTypeface: (args: {
    data: TypefaceUpdateInput;
    where: TypefaceWhereUniqueInput;
  }) => TypefacePromise;
  updateManyTypefaces: (args: {
    data: TypefaceUpdateManyMutationInput;
    where?: TypefaceWhereInput;
  }) => BatchPayloadPromise;
  upsertTypeface: (args: {
    where: TypefaceWhereUniqueInput;
    create: TypefaceCreateInput;
    update: TypefaceUpdateInput;
  }) => TypefacePromise;
  deleteTypeface: (where: TypefaceWhereUniqueInput) => TypefacePromise;
  deleteManyTypefaces: (where?: TypefaceWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;
  createWebsite: (data: WebsiteCreateInput) => WebsitePromise;
  updateWebsite: (args: {
    data: WebsiteUpdateInput;
    where: WebsiteWhereUniqueInput;
  }) => WebsitePromise;
  updateManyWebsites: (args: {
    data: WebsiteUpdateManyMutationInput;
    where?: WebsiteWhereInput;
  }) => BatchPayloadPromise;
  upsertWebsite: (args: {
    where: WebsiteWhereUniqueInput;
    create: WebsiteCreateInput;
    update: WebsiteUpdateInput;
  }) => WebsitePromise;
  deleteWebsite: (where: WebsiteWhereUniqueInput) => WebsitePromise;
  deleteManyWebsites: (where?: WebsiteWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  designer: (
    where?: DesignerSubscriptionWhereInput
  ) => DesignerSubscriptionPayloadSubscription;
  file: (
    where?: FileSubscriptionWhereInput
  ) => FileSubscriptionPayloadSubscription;
  foundry: (
    where?: FoundrySubscriptionWhereInput
  ) => FoundrySubscriptionPayloadSubscription;
  images: (
    where?: ImagesSubscriptionWhereInput
  ) => ImagesSubscriptionPayloadSubscription;
  tag: (
    where?: TagSubscriptionWhereInput
  ) => TagSubscriptionPayloadSubscription;
  typeface: (
    where?: TypefaceSubscriptionWhereInput
  ) => TypefaceSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
  website: (
    where?: WebsiteSubscriptionWhereInput
  ) => WebsiteSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type DesignerOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "url_ASC"
  | "url_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type Role = "ADMIN" | "SUBSCRIBER";

export type TypefaceOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "downloadUrl_ASC"
  | "downloadUrl_DESC"
  | "description_ASC"
  | "description_DESC"
  | "slug_ASC"
  | "slug_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type WebsiteOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "isPublished_ASC"
  | "isPublished_DESC"
  | "title_ASC"
  | "title_DESC"
  | "slug_ASC"
  | "slug_DESC"
  | "url_ASC"
  | "url_DESC"
  | "featured_ASC"
  | "featured_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type TagOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type FoundryOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "url_ASC"
  | "url_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type FileOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "filename_ASC"
  | "filename_DESC"
  | "mimetype_ASC"
  | "mimetype_DESC"
  | "encoding_ASC"
  | "encoding_DESC"
  | "url_ASC"
  | "url_DESC";

export type ImagesOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "name_ASC"
  | "name_DESC"
  | "role_ASC"
  | "role_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export interface WebsiteUpdateManyWithoutAddedByInput {
  create?: Maybe<
    WebsiteCreateWithoutAddedByInput[] | WebsiteCreateWithoutAddedByInput
  >;
  delete?: Maybe<WebsiteWhereUniqueInput[] | WebsiteWhereUniqueInput>;
  connect?: Maybe<WebsiteWhereUniqueInput[] | WebsiteWhereUniqueInput>;
  set?: Maybe<WebsiteWhereUniqueInput[] | WebsiteWhereUniqueInput>;
  disconnect?: Maybe<WebsiteWhereUniqueInput[] | WebsiteWhereUniqueInput>;
  update?: Maybe<
    | WebsiteUpdateWithWhereUniqueWithoutAddedByInput[]
    | WebsiteUpdateWithWhereUniqueWithoutAddedByInput
  >;
  upsert?: Maybe<
    | WebsiteUpsertWithWhereUniqueWithoutAddedByInput[]
    | WebsiteUpsertWithWhereUniqueWithoutAddedByInput
  >;
  deleteMany?: Maybe<WebsiteScalarWhereInput[] | WebsiteScalarWhereInput>;
  updateMany?: Maybe<
    | WebsiteUpdateManyWithWhereNestedInput[]
    | WebsiteUpdateManyWithWhereNestedInput
  >;
}

export type DesignerWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  name?: Maybe<String>;
}>;

export interface FoundryUpdateManyWithoutTypefacesInput {
  create?: Maybe<
    FoundryCreateWithoutTypefacesInput[] | FoundryCreateWithoutTypefacesInput
  >;
  delete?: Maybe<FoundryWhereUniqueInput[] | FoundryWhereUniqueInput>;
  connect?: Maybe<FoundryWhereUniqueInput[] | FoundryWhereUniqueInput>;
  set?: Maybe<FoundryWhereUniqueInput[] | FoundryWhereUniqueInput>;
  disconnect?: Maybe<FoundryWhereUniqueInput[] | FoundryWhereUniqueInput>;
  update?: Maybe<
    | FoundryUpdateWithWhereUniqueWithoutTypefacesInput[]
    | FoundryUpdateWithWhereUniqueWithoutTypefacesInput
  >;
  upsert?: Maybe<
    | FoundryUpsertWithWhereUniqueWithoutTypefacesInput[]
    | FoundryUpsertWithWhereUniqueWithoutTypefacesInput
  >;
  deleteMany?: Maybe<FoundryScalarWhereInput[] | FoundryScalarWhereInput>;
  updateMany?: Maybe<
    | FoundryUpdateManyWithWhereNestedInput[]
    | FoundryUpdateManyWithWhereNestedInput
  >;
}

export interface TagWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  website_every?: Maybe<WebsiteWhereInput>;
  website_some?: Maybe<WebsiteWhereInput>;
  website_none?: Maybe<WebsiteWhereInput>;
  typeface_every?: Maybe<TypefaceWhereInput>;
  typeface_some?: Maybe<TypefaceWhereInput>;
  typeface_none?: Maybe<TypefaceWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<TagWhereInput[] | TagWhereInput>;
  OR?: Maybe<TagWhereInput[] | TagWhereInput>;
  NOT?: Maybe<TagWhereInput[] | TagWhereInput>;
}

export interface FoundryUpdateWithWhereUniqueWithoutTypefacesInput {
  where: FoundryWhereUniqueInput;
  data: FoundryUpdateWithoutTypefacesDataInput;
}

export interface DesignerWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  typefaces_every?: Maybe<TypefaceWhereInput>;
  typefaces_some?: Maybe<TypefaceWhereInput>;
  typefaces_none?: Maybe<TypefaceWhereInput>;
  addedBy?: Maybe<UserWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<DesignerWhereInput[] | DesignerWhereInput>;
  OR?: Maybe<DesignerWhereInput[] | DesignerWhereInput>;
  NOT?: Maybe<DesignerWhereInput[] | DesignerWhereInput>;
}

export interface TagCreateWithoutWebsiteInput {
  id?: Maybe<ID_Input>;
  name: String;
  typeface?: Maybe<TypefaceCreateManyWithoutTagsInput>;
}

export interface TypefaceUpsertWithoutImagesInput {
  update: TypefaceUpdateWithoutImagesDataInput;
  create: TypefaceCreateWithoutImagesInput;
}

export interface TypefaceCreateManyWithoutTagsInput {
  create?: Maybe<
    TypefaceCreateWithoutTagsInput[] | TypefaceCreateWithoutTagsInput
  >;
  connect?: Maybe<TypefaceWhereUniqueInput[] | TypefaceWhereUniqueInput>;
}

export interface FoundryUpdateWithoutTypefacesDataInput {
  name?: Maybe<String>;
  url?: Maybe<String>;
  addedBy?: Maybe<UserUpdateOneRequiredInput>;
}

export interface TypefaceCreateWithoutTagsInput {
  id?: Maybe<ID_Input>;
  name: String;
  downloadUrl: String;
  description?: Maybe<String>;
  slug: String;
  usedBy?: Maybe<WebsiteCreateManyWithoutTypefacesInput>;
  addedBy: UserCreateOneWithoutTypefacesInput;
  foundries?: Maybe<FoundryCreateManyWithoutTypefacesInput>;
  designers?: Maybe<DesignerCreateManyWithoutTypefacesInput>;
  images?: Maybe<ImagesCreateOneWithoutTypefaceInput>;
}

export interface WebsiteSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<WebsiteWhereInput>;
  AND?: Maybe<WebsiteSubscriptionWhereInput[] | WebsiteSubscriptionWhereInput>;
  OR?: Maybe<WebsiteSubscriptionWhereInput[] | WebsiteSubscriptionWhereInput>;
  NOT?: Maybe<WebsiteSubscriptionWhereInput[] | WebsiteSubscriptionWhereInput>;
}

export interface DesignerUpdateInput {
  name?: Maybe<String>;
  url?: Maybe<String>;
  typefaces?: Maybe<TypefaceUpdateManyWithoutDesignersInput>;
  addedBy?: Maybe<UserUpdateOneRequiredInput>;
}

export interface TypefaceSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<TypefaceWhereInput>;
  AND?: Maybe<
    TypefaceSubscriptionWhereInput[] | TypefaceSubscriptionWhereInput
  >;
  OR?: Maybe<TypefaceSubscriptionWhereInput[] | TypefaceSubscriptionWhereInput>;
  NOT?: Maybe<
    TypefaceSubscriptionWhereInput[] | TypefaceSubscriptionWhereInput
  >;
}

export interface TypefaceUpdateManyWithoutDesignersInput {
  create?: Maybe<
    TypefaceCreateWithoutDesignersInput[] | TypefaceCreateWithoutDesignersInput
  >;
  delete?: Maybe<TypefaceWhereUniqueInput[] | TypefaceWhereUniqueInput>;
  connect?: Maybe<TypefaceWhereUniqueInput[] | TypefaceWhereUniqueInput>;
  set?: Maybe<TypefaceWhereUniqueInput[] | TypefaceWhereUniqueInput>;
  disconnect?: Maybe<TypefaceWhereUniqueInput[] | TypefaceWhereUniqueInput>;
  update?: Maybe<
    | TypefaceUpdateWithWhereUniqueWithoutDesignersInput[]
    | TypefaceUpdateWithWhereUniqueWithoutDesignersInput
  >;
  upsert?: Maybe<
    | TypefaceUpsertWithWhereUniqueWithoutDesignersInput[]
    | TypefaceUpsertWithWhereUniqueWithoutDesignersInput
  >;
  deleteMany?: Maybe<TypefaceScalarWhereInput[] | TypefaceScalarWhereInput>;
  updateMany?: Maybe<
    | TypefaceUpdateManyWithWhereNestedInput[]
    | TypefaceUpdateManyWithWhereNestedInput
  >;
}

export interface ImagesWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  website?: Maybe<WebsiteWhereInput>;
  thumbnail?: Maybe<FileWhereInput>;
  full?: Maybe<FileWhereInput>;
  typeface?: Maybe<TypefaceWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ImagesWhereInput[] | ImagesWhereInput>;
  OR?: Maybe<ImagesWhereInput[] | ImagesWhereInput>;
  NOT?: Maybe<ImagesWhereInput[] | ImagesWhereInput>;
}

export interface TypefaceUpdateWithWhereUniqueWithoutDesignersInput {
  where: TypefaceWhereUniqueInput;
  data: TypefaceUpdateWithoutDesignersDataInput;
}

export interface FoundrySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<FoundryWhereInput>;
  AND?: Maybe<FoundrySubscriptionWhereInput[] | FoundrySubscriptionWhereInput>;
  OR?: Maybe<FoundrySubscriptionWhereInput[] | FoundrySubscriptionWhereInput>;
  NOT?: Maybe<FoundrySubscriptionWhereInput[] | FoundrySubscriptionWhereInput>;
}

export interface TypefaceUpdateWithoutDesignersDataInput {
  name?: Maybe<String>;
  downloadUrl?: Maybe<String>;
  description?: Maybe<String>;
  slug?: Maybe<String>;
  usedBy?: Maybe<WebsiteUpdateManyWithoutTypefacesInput>;
  addedBy?: Maybe<UserUpdateOneRequiredWithoutTypefacesInput>;
  foundries?: Maybe<FoundryUpdateManyWithoutTypefacesInput>;
  tags?: Maybe<TagUpdateManyWithoutTypefaceInput>;
  images?: Maybe<ImagesUpdateOneWithoutTypefaceInput>;
}

export interface DesignerSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<DesignerWhereInput>;
  AND?: Maybe<
    DesignerSubscriptionWhereInput[] | DesignerSubscriptionWhereInput
  >;
  OR?: Maybe<DesignerSubscriptionWhereInput[] | DesignerSubscriptionWhereInput>;
  NOT?: Maybe<
    DesignerSubscriptionWhereInput[] | DesignerSubscriptionWhereInput
  >;
}

export interface WebsiteUpdateManyWithoutTypefacesInput {
  create?: Maybe<
    WebsiteCreateWithoutTypefacesInput[] | WebsiteCreateWithoutTypefacesInput
  >;
  delete?: Maybe<WebsiteWhereUniqueInput[] | WebsiteWhereUniqueInput>;
  connect?: Maybe<WebsiteWhereUniqueInput[] | WebsiteWhereUniqueInput>;
  set?: Maybe<WebsiteWhereUniqueInput[] | WebsiteWhereUniqueInput>;
  disconnect?: Maybe<WebsiteWhereUniqueInput[] | WebsiteWhereUniqueInput>;
  update?: Maybe<
    | WebsiteUpdateWithWhereUniqueWithoutTypefacesInput[]
    | WebsiteUpdateWithWhereUniqueWithoutTypefacesInput
  >;
  upsert?: Maybe<
    | WebsiteUpsertWithWhereUniqueWithoutTypefacesInput[]
    | WebsiteUpsertWithWhereUniqueWithoutTypefacesInput
  >;
  deleteMany?: Maybe<WebsiteScalarWhereInput[] | WebsiteScalarWhereInput>;
  updateMany?: Maybe<
    | WebsiteUpdateManyWithWhereNestedInput[]
    | WebsiteUpdateManyWithWhereNestedInput
  >;
}

export interface WebsiteUpdateInput {
  isPublished?: Maybe<Boolean>;
  title?: Maybe<String>;
  images?: Maybe<ImagesUpdateOneWithoutWebsiteInput>;
  slug?: Maybe<String>;
  url?: Maybe<String>;
  addedBy?: Maybe<UserUpdateOneRequiredWithoutWebsitesInput>;
  typefaces?: Maybe<TypefaceUpdateManyWithoutUsedByInput>;
  featured?: Maybe<Boolean>;
  tags?: Maybe<TagUpdateManyWithoutWebsiteInput>;
}

export interface WebsiteUpdateWithWhereUniqueWithoutTypefacesInput {
  where: WebsiteWhereUniqueInput;
  data: WebsiteUpdateWithoutTypefacesDataInput;
}

export interface UserUpdateManyMutationInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  name?: Maybe<String>;
  role?: Maybe<Role>;
}

export interface WebsiteUpdateWithoutTypefacesDataInput {
  isPublished?: Maybe<Boolean>;
  title?: Maybe<String>;
  images?: Maybe<ImagesUpdateOneWithoutWebsiteInput>;
  slug?: Maybe<String>;
  url?: Maybe<String>;
  addedBy?: Maybe<UserUpdateOneRequiredWithoutWebsitesInput>;
  featured?: Maybe<Boolean>;
  tags?: Maybe<TagUpdateManyWithoutWebsiteInput>;
}

export interface WebsiteWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  isPublished_not?: Maybe<Boolean>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  images?: Maybe<ImagesWhereInput>;
  slug?: Maybe<String>;
  slug_not?: Maybe<String>;
  slug_in?: Maybe<String[] | String>;
  slug_not_in?: Maybe<String[] | String>;
  slug_lt?: Maybe<String>;
  slug_lte?: Maybe<String>;
  slug_gt?: Maybe<String>;
  slug_gte?: Maybe<String>;
  slug_contains?: Maybe<String>;
  slug_not_contains?: Maybe<String>;
  slug_starts_with?: Maybe<String>;
  slug_not_starts_with?: Maybe<String>;
  slug_ends_with?: Maybe<String>;
  slug_not_ends_with?: Maybe<String>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  addedBy?: Maybe<UserWhereInput>;
  typefaces_every?: Maybe<TypefaceWhereInput>;
  typefaces_some?: Maybe<TypefaceWhereInput>;
  typefaces_none?: Maybe<TypefaceWhereInput>;
  featured?: Maybe<Boolean>;
  featured_not?: Maybe<Boolean>;
  tags_every?: Maybe<TagWhereInput>;
  tags_some?: Maybe<TagWhereInput>;
  tags_none?: Maybe<TagWhereInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<WebsiteWhereInput[] | WebsiteWhereInput>;
  OR?: Maybe<WebsiteWhereInput[] | WebsiteWhereInput>;
  NOT?: Maybe<WebsiteWhereInput[] | WebsiteWhereInput>;
}

export interface ImagesUpdateOneWithoutWebsiteInput {
  create?: Maybe<ImagesCreateWithoutWebsiteInput>;
  update?: Maybe<ImagesUpdateWithoutWebsiteDataInput>;
  upsert?: Maybe<ImagesUpsertWithoutWebsiteInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ImagesWhereUniqueInput>;
}

export interface TypefaceUpdateManyMutationInput {
  name?: Maybe<String>;
  downloadUrl?: Maybe<String>;
  description?: Maybe<String>;
  slug?: Maybe<String>;
}

export interface ImagesUpdateWithoutWebsiteDataInput {
  thumbnail?: Maybe<FileUpdateOneInput>;
  full?: Maybe<FileUpdateOneInput>;
  typeface?: Maybe<TypefaceUpdateOneWithoutImagesInput>;
}

export type FoundryWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  name?: Maybe<String>;
}>;

export interface FileUpdateOneInput {
  create?: Maybe<FileCreateInput>;
  update?: Maybe<FileUpdateDataInput>;
  upsert?: Maybe<FileUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<FileWhereUniqueInput>;
}

export interface TagUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface FileUpdateDataInput {
  filename?: Maybe<String>;
  mimetype?: Maybe<String>;
  encoding?: Maybe<String>;
  url?: Maybe<String>;
}

export type ImagesWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface FileUpsertNestedInput {
  update: FileUpdateDataInput;
  create: FileCreateInput;
}

export interface TagCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  website?: Maybe<WebsiteCreateManyWithoutTagsInput>;
  typeface?: Maybe<TypefaceCreateManyWithoutTagsInput>;
}

export interface TypefaceUpdateOneWithoutImagesInput {
  create?: Maybe<TypefaceCreateWithoutImagesInput>;
  update?: Maybe<TypefaceUpdateWithoutImagesDataInput>;
  upsert?: Maybe<TypefaceUpsertWithoutImagesInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<TypefaceWhereUniqueInput>;
}

export interface ImagesCreateInput {
  id?: Maybe<ID_Input>;
  website?: Maybe<WebsiteCreateOneWithoutImagesInput>;
  thumbnail?: Maybe<FileCreateOneInput>;
  full?: Maybe<FileCreateOneInput>;
  typeface?: Maybe<TypefaceCreateOneWithoutImagesInput>;
}

export interface TypefaceUpdateWithoutImagesDataInput {
  name?: Maybe<String>;
  downloadUrl?: Maybe<String>;
  description?: Maybe<String>;
  slug?: Maybe<String>;
  usedBy?: Maybe<WebsiteUpdateManyWithoutTypefacesInput>;
  addedBy?: Maybe<UserUpdateOneRequiredWithoutTypefacesInput>;
  foundries?: Maybe<FoundryUpdateManyWithoutTypefacesInput>;
  designers?: Maybe<DesignerUpdateManyWithoutTypefacesInput>;
  tags?: Maybe<TagUpdateManyWithoutTypefaceInput>;
}

export interface FoundryUpdateManyMutationInput {
  name?: Maybe<String>;
  url?: Maybe<String>;
}

export interface UserUpdateOneRequiredWithoutTypefacesInput {
  create?: Maybe<UserCreateWithoutTypefacesInput>;
  update?: Maybe<UserUpdateWithoutTypefacesDataInput>;
  upsert?: Maybe<UserUpsertWithoutTypefacesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface TypefaceUpdateWithoutFoundriesDataInput {
  name?: Maybe<String>;
  downloadUrl?: Maybe<String>;
  description?: Maybe<String>;
  slug?: Maybe<String>;
  usedBy?: Maybe<WebsiteUpdateManyWithoutTypefacesInput>;
  addedBy?: Maybe<UserUpdateOneRequiredWithoutTypefacesInput>;
  designers?: Maybe<DesignerUpdateManyWithoutTypefacesInput>;
  tags?: Maybe<TagUpdateManyWithoutTypefaceInput>;
  images?: Maybe<ImagesUpdateOneWithoutTypefaceInput>;
}

export interface UserUpdateWithoutTypefacesDataInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  name?: Maybe<String>;
  role?: Maybe<Role>;
  websites?: Maybe<WebsiteUpdateManyWithoutAddedByInput>;
}

export interface TypefaceUpdateWithWhereUniqueWithoutFoundriesInput {
  where: TypefaceWhereUniqueInput;
  data: TypefaceUpdateWithoutFoundriesDataInput;
}

export interface WebsiteUpsertWithWhereUniqueWithoutTypefacesInput {
  where: WebsiteWhereUniqueInput;
  update: WebsiteUpdateWithoutTypefacesDataInput;
  create: WebsiteCreateWithoutTypefacesInput;
}

export interface FoundryUpdateInput {
  name?: Maybe<String>;
  url?: Maybe<String>;
  typefaces?: Maybe<TypefaceUpdateManyWithoutFoundriesInput>;
  addedBy?: Maybe<UserUpdateOneRequiredInput>;
}

export interface WebsiteUpdateWithWhereUniqueWithoutAddedByInput {
  where: WebsiteWhereUniqueInput;
  data: WebsiteUpdateWithoutAddedByDataInput;
}

export interface TypefaceCreateWithoutFoundriesInput {
  id?: Maybe<ID_Input>;
  name: String;
  downloadUrl: String;
  description?: Maybe<String>;
  slug: String;
  usedBy?: Maybe<WebsiteCreateManyWithoutTypefacesInput>;
  addedBy: UserCreateOneWithoutTypefacesInput;
  designers?: Maybe<DesignerCreateManyWithoutTypefacesInput>;
  tags?: Maybe<TagCreateManyWithoutTypefaceInput>;
  images?: Maybe<ImagesCreateOneWithoutTypefaceInput>;
}

export interface WebsiteUpdateWithoutAddedByDataInput {
  isPublished?: Maybe<Boolean>;
  title?: Maybe<String>;
  images?: Maybe<ImagesUpdateOneWithoutWebsiteInput>;
  slug?: Maybe<String>;
  url?: Maybe<String>;
  typefaces?: Maybe<TypefaceUpdateManyWithoutUsedByInput>;
  featured?: Maybe<Boolean>;
  tags?: Maybe<TagUpdateManyWithoutWebsiteInput>;
}

export interface FoundryCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  url: String;
  typefaces?: Maybe<TypefaceCreateManyWithoutFoundriesInput>;
  addedBy: UserCreateOneInput;
}

export interface TypefaceUpdateManyWithoutUsedByInput {
  create?: Maybe<
    TypefaceCreateWithoutUsedByInput[] | TypefaceCreateWithoutUsedByInput
  >;
  delete?: Maybe<TypefaceWhereUniqueInput[] | TypefaceWhereUniqueInput>;
  connect?: Maybe<TypefaceWhereUniqueInput[] | TypefaceWhereUniqueInput>;
  set?: Maybe<TypefaceWhereUniqueInput[] | TypefaceWhereUniqueInput>;
  disconnect?: Maybe<TypefaceWhereUniqueInput[] | TypefaceWhereUniqueInput>;
  update?: Maybe<
    | TypefaceUpdateWithWhereUniqueWithoutUsedByInput[]
    | TypefaceUpdateWithWhereUniqueWithoutUsedByInput
  >;
  upsert?: Maybe<
    | TypefaceUpsertWithWhereUniqueWithoutUsedByInput[]
    | TypefaceUpsertWithWhereUniqueWithoutUsedByInput
  >;
  deleteMany?: Maybe<TypefaceScalarWhereInput[] | TypefaceScalarWhereInput>;
  updateMany?: Maybe<
    | TypefaceUpdateManyWithWhereNestedInput[]
    | TypefaceUpdateManyWithWhereNestedInput
  >;
}

export type WebsiteWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  title?: Maybe<String>;
  slug?: Maybe<String>;
}>;

export interface TypefaceUpdateWithWhereUniqueWithoutUsedByInput {
  where: TypefaceWhereUniqueInput;
  data: TypefaceUpdateWithoutUsedByDataInput;
}

export interface DesignerUpdateManyMutationInput {
  name?: Maybe<String>;
  url?: Maybe<String>;
}

export interface TypefaceUpdateWithoutUsedByDataInput {
  name?: Maybe<String>;
  downloadUrl?: Maybe<String>;
  description?: Maybe<String>;
  slug?: Maybe<String>;
  addedBy?: Maybe<UserUpdateOneRequiredWithoutTypefacesInput>;
  foundries?: Maybe<FoundryUpdateManyWithoutTypefacesInput>;
  designers?: Maybe<DesignerUpdateManyWithoutTypefacesInput>;
  tags?: Maybe<TagUpdateManyWithoutTypefaceInput>;
  images?: Maybe<ImagesUpdateOneWithoutTypefaceInput>;
}

export interface TypefaceCreateManyWithoutDesignersInput {
  create?: Maybe<
    TypefaceCreateWithoutDesignersInput[] | TypefaceCreateWithoutDesignersInput
  >;
  connect?: Maybe<TypefaceWhereUniqueInput[] | TypefaceWhereUniqueInput>;
}

export interface FoundryWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  typefaces_every?: Maybe<TypefaceWhereInput>;
  typefaces_some?: Maybe<TypefaceWhereInput>;
  typefaces_none?: Maybe<TypefaceWhereInput>;
  addedBy?: Maybe<UserWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<FoundryWhereInput[] | FoundryWhereInput>;
  OR?: Maybe<FoundryWhereInput[] | FoundryWhereInput>;
  NOT?: Maybe<FoundryWhereInput[] | FoundryWhereInput>;
}

export interface WebsiteCreateManyWithoutTypefacesInput {
  create?: Maybe<
    WebsiteCreateWithoutTypefacesInput[] | WebsiteCreateWithoutTypefacesInput
  >;
  connect?: Maybe<WebsiteWhereUniqueInput[] | WebsiteWhereUniqueInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  role?: Maybe<Role>;
  role_not?: Maybe<Role>;
  role_in?: Maybe<Role[] | Role>;
  role_not_in?: Maybe<Role[] | Role>;
  websites_every?: Maybe<WebsiteWhereInput>;
  websites_some?: Maybe<WebsiteWhereInput>;
  websites_none?: Maybe<WebsiteWhereInput>;
  typefaces_every?: Maybe<TypefaceWhereInput>;
  typefaces_some?: Maybe<TypefaceWhereInput>;
  typefaces_none?: Maybe<TypefaceWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface ImagesCreateOneWithoutWebsiteInput {
  create?: Maybe<ImagesCreateWithoutWebsiteInput>;
  connect?: Maybe<ImagesWhereUniqueInput>;
}

export interface ImagesUpsertWithoutWebsiteInput {
  update: ImagesUpdateWithoutWebsiteDataInput;
  create: ImagesCreateWithoutWebsiteInput;
}

export interface FileCreateOneInput {
  create?: Maybe<FileCreateInput>;
  connect?: Maybe<FileWhereUniqueInput>;
}

export interface UserUpdateOneRequiredInput {
  create?: Maybe<UserCreateInput>;
  update?: Maybe<UserUpdateDataInput>;
  upsert?: Maybe<UserUpsertNestedInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface TypefaceCreateOneWithoutImagesInput {
  create?: Maybe<TypefaceCreateWithoutImagesInput>;
  connect?: Maybe<TypefaceWhereUniqueInput>;
}

export interface UserUpdateDataInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  name?: Maybe<String>;
  role?: Maybe<Role>;
  websites?: Maybe<WebsiteUpdateManyWithoutAddedByInput>;
  typefaces?: Maybe<TypefaceUpdateManyWithoutAddedByInput>;
}

export interface UserCreateOneWithoutTypefacesInput {
  create?: Maybe<UserCreateWithoutTypefacesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface TypefaceUpdateManyWithoutAddedByInput {
  create?: Maybe<
    TypefaceCreateWithoutAddedByInput[] | TypefaceCreateWithoutAddedByInput
  >;
  delete?: Maybe<TypefaceWhereUniqueInput[] | TypefaceWhereUniqueInput>;
  connect?: Maybe<TypefaceWhereUniqueInput[] | TypefaceWhereUniqueInput>;
  set?: Maybe<TypefaceWhereUniqueInput[] | TypefaceWhereUniqueInput>;
  disconnect?: Maybe<TypefaceWhereUniqueInput[] | TypefaceWhereUniqueInput>;
  update?: Maybe<
    | TypefaceUpdateWithWhereUniqueWithoutAddedByInput[]
    | TypefaceUpdateWithWhereUniqueWithoutAddedByInput
  >;
  upsert?: Maybe<
    | TypefaceUpsertWithWhereUniqueWithoutAddedByInput[]
    | TypefaceUpsertWithWhereUniqueWithoutAddedByInput
  >;
  deleteMany?: Maybe<TypefaceScalarWhereInput[] | TypefaceScalarWhereInput>;
  updateMany?: Maybe<
    | TypefaceUpdateManyWithWhereNestedInput[]
    | TypefaceUpdateManyWithWhereNestedInput
  >;
}

export interface WebsiteCreateManyWithoutAddedByInput {
  create?: Maybe<
    WebsiteCreateWithoutAddedByInput[] | WebsiteCreateWithoutAddedByInput
  >;
  connect?: Maybe<WebsiteWhereUniqueInput[] | WebsiteWhereUniqueInput>;
}

export interface TypefaceUpdateWithWhereUniqueWithoutAddedByInput {
  where: TypefaceWhereUniqueInput;
  data: TypefaceUpdateWithoutAddedByDataInput;
}

export interface TypefaceCreateManyWithoutUsedByInput {
  create?: Maybe<
    TypefaceCreateWithoutUsedByInput[] | TypefaceCreateWithoutUsedByInput
  >;
  connect?: Maybe<TypefaceWhereUniqueInput[] | TypefaceWhereUniqueInput>;
}

export interface TypefaceUpdateWithoutAddedByDataInput {
  name?: Maybe<String>;
  downloadUrl?: Maybe<String>;
  description?: Maybe<String>;
  slug?: Maybe<String>;
  usedBy?: Maybe<WebsiteUpdateManyWithoutTypefacesInput>;
  foundries?: Maybe<FoundryUpdateManyWithoutTypefacesInput>;
  designers?: Maybe<DesignerUpdateManyWithoutTypefacesInput>;
  tags?: Maybe<TagUpdateManyWithoutTypefaceInput>;
  images?: Maybe<ImagesUpdateOneWithoutTypefaceInput>;
}

export interface FoundryCreateManyWithoutTypefacesInput {
  create?: Maybe<
    FoundryCreateWithoutTypefacesInput[] | FoundryCreateWithoutTypefacesInput
  >;
  connect?: Maybe<FoundryWhereUniqueInput[] | FoundryWhereUniqueInput>;
}

export interface DesignerUpdateManyWithoutTypefacesInput {
  create?: Maybe<
    DesignerCreateWithoutTypefacesInput[] | DesignerCreateWithoutTypefacesInput
  >;
  delete?: Maybe<DesignerWhereUniqueInput[] | DesignerWhereUniqueInput>;
  connect?: Maybe<DesignerWhereUniqueInput[] | DesignerWhereUniqueInput>;
  set?: Maybe<DesignerWhereUniqueInput[] | DesignerWhereUniqueInput>;
  disconnect?: Maybe<DesignerWhereUniqueInput[] | DesignerWhereUniqueInput>;
  update?: Maybe<
    | DesignerUpdateWithWhereUniqueWithoutTypefacesInput[]
    | DesignerUpdateWithWhereUniqueWithoutTypefacesInput
  >;
  upsert?: Maybe<
    | DesignerUpsertWithWhereUniqueWithoutTypefacesInput[]
    | DesignerUpsertWithWhereUniqueWithoutTypefacesInput
  >;
  deleteMany?: Maybe<DesignerScalarWhereInput[] | DesignerScalarWhereInput>;
  updateMany?: Maybe<
    | DesignerUpdateManyWithWhereNestedInput[]
    | DesignerUpdateManyWithWhereNestedInput
  >;
}

export interface UserCreateOneInput {
  create?: Maybe<UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface DesignerUpdateWithWhereUniqueWithoutTypefacesInput {
  where: DesignerWhereUniqueInput;
  data: DesignerUpdateWithoutTypefacesDataInput;
}

export interface TypefaceCreateManyWithoutAddedByInput {
  create?: Maybe<
    TypefaceCreateWithoutAddedByInput[] | TypefaceCreateWithoutAddedByInput
  >;
  connect?: Maybe<TypefaceWhereUniqueInput[] | TypefaceWhereUniqueInput>;
}

export interface DesignerUpdateWithoutTypefacesDataInput {
  name?: Maybe<String>;
  url?: Maybe<String>;
  addedBy?: Maybe<UserUpdateOneRequiredInput>;
}

export interface DesignerCreateManyWithoutTypefacesInput {
  create?: Maybe<
    DesignerCreateWithoutTypefacesInput[] | DesignerCreateWithoutTypefacesInput
  >;
  connect?: Maybe<DesignerWhereUniqueInput[] | DesignerWhereUniqueInput>;
}

export interface DesignerUpsertWithWhereUniqueWithoutTypefacesInput {
  where: DesignerWhereUniqueInput;
  update: DesignerUpdateWithoutTypefacesDataInput;
  create: DesignerCreateWithoutTypefacesInput;
}

export interface TagCreateManyWithoutTypefaceInput {
  create?: Maybe<
    TagCreateWithoutTypefaceInput[] | TagCreateWithoutTypefaceInput
  >;
  connect?: Maybe<TagWhereUniqueInput[] | TagWhereUniqueInput>;
}

export interface DesignerScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<DesignerScalarWhereInput[] | DesignerScalarWhereInput>;
  OR?: Maybe<DesignerScalarWhereInput[] | DesignerScalarWhereInput>;
  NOT?: Maybe<DesignerScalarWhereInput[] | DesignerScalarWhereInput>;
}

export interface WebsiteCreateManyWithoutTagsInput {
  create?: Maybe<
    WebsiteCreateWithoutTagsInput[] | WebsiteCreateWithoutTagsInput
  >;
  connect?: Maybe<WebsiteWhereUniqueInput[] | WebsiteWhereUniqueInput>;
}

export interface DesignerUpdateManyWithWhereNestedInput {
  where: DesignerScalarWhereInput;
  data: DesignerUpdateManyDataInput;
}

export interface UserCreateOneWithoutWebsitesInput {
  create?: Maybe<UserCreateWithoutWebsitesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface DesignerUpdateManyDataInput {
  name?: Maybe<String>;
  url?: Maybe<String>;
}

export interface ImagesCreateOneWithoutTypefaceInput {
  create?: Maybe<ImagesCreateWithoutTypefaceInput>;
  connect?: Maybe<ImagesWhereUniqueInput>;
}

export interface TagUpdateManyWithoutTypefaceInput {
  create?: Maybe<
    TagCreateWithoutTypefaceInput[] | TagCreateWithoutTypefaceInput
  >;
  delete?: Maybe<TagWhereUniqueInput[] | TagWhereUniqueInput>;
  connect?: Maybe<TagWhereUniqueInput[] | TagWhereUniqueInput>;
  set?: Maybe<TagWhereUniqueInput[] | TagWhereUniqueInput>;
  disconnect?: Maybe<TagWhereUniqueInput[] | TagWhereUniqueInput>;
  update?: Maybe<
    | TagUpdateWithWhereUniqueWithoutTypefaceInput[]
    | TagUpdateWithWhereUniqueWithoutTypefaceInput
  >;
  upsert?: Maybe<
    | TagUpsertWithWhereUniqueWithoutTypefaceInput[]
    | TagUpsertWithWhereUniqueWithoutTypefaceInput
  >;
  deleteMany?: Maybe<TagScalarWhereInput[] | TagScalarWhereInput>;
  updateMany?: Maybe<
    TagUpdateManyWithWhereNestedInput[] | TagUpdateManyWithWhereNestedInput
  >;
}

export interface WebsiteCreateOneWithoutImagesInput {
  create?: Maybe<WebsiteCreateWithoutImagesInput>;
  connect?: Maybe<WebsiteWhereUniqueInput>;
}

export interface TagUpdateWithWhereUniqueWithoutTypefaceInput {
  where: TagWhereUniqueInput;
  data: TagUpdateWithoutTypefaceDataInput;
}

export interface TagCreateManyWithoutWebsiteInput {
  create?: Maybe<TagCreateWithoutWebsiteInput[] | TagCreateWithoutWebsiteInput>;
  connect?: Maybe<TagWhereUniqueInput[] | TagWhereUniqueInput>;
}

export interface TagUpdateWithoutTypefaceDataInput {
  name?: Maybe<String>;
  website?: Maybe<WebsiteUpdateManyWithoutTagsInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface WebsiteUpdateManyWithoutTagsInput {
  create?: Maybe<
    WebsiteCreateWithoutTagsInput[] | WebsiteCreateWithoutTagsInput
  >;
  delete?: Maybe<WebsiteWhereUniqueInput[] | WebsiteWhereUniqueInput>;
  connect?: Maybe<WebsiteWhereUniqueInput[] | WebsiteWhereUniqueInput>;
  set?: Maybe<WebsiteWhereUniqueInput[] | WebsiteWhereUniqueInput>;
  disconnect?: Maybe<WebsiteWhereUniqueInput[] | WebsiteWhereUniqueInput>;
  update?: Maybe<
    | WebsiteUpdateWithWhereUniqueWithoutTagsInput[]
    | WebsiteUpdateWithWhereUniqueWithoutTagsInput
  >;
  upsert?: Maybe<
    | WebsiteUpsertWithWhereUniqueWithoutTagsInput[]
    | WebsiteUpsertWithWhereUniqueWithoutTagsInput
  >;
  deleteMany?: Maybe<WebsiteScalarWhereInput[] | WebsiteScalarWhereInput>;
  updateMany?: Maybe<
    | WebsiteUpdateManyWithWhereNestedInput[]
    | WebsiteUpdateManyWithWhereNestedInput
  >;
}

export interface ImagesSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ImagesWhereInput>;
  AND?: Maybe<ImagesSubscriptionWhereInput[] | ImagesSubscriptionWhereInput>;
  OR?: Maybe<ImagesSubscriptionWhereInput[] | ImagesSubscriptionWhereInput>;
  NOT?: Maybe<ImagesSubscriptionWhereInput[] | ImagesSubscriptionWhereInput>;
}

export interface WebsiteUpdateWithWhereUniqueWithoutTagsInput {
  where: WebsiteWhereUniqueInput;
  data: WebsiteUpdateWithoutTagsDataInput;
}

export interface WebsiteUpdateManyMutationInput {
  isPublished?: Maybe<Boolean>;
  title?: Maybe<String>;
  slug?: Maybe<String>;
  url?: Maybe<String>;
  featured?: Maybe<Boolean>;
}

export interface WebsiteUpdateWithoutTagsDataInput {
  isPublished?: Maybe<Boolean>;
  title?: Maybe<String>;
  images?: Maybe<ImagesUpdateOneWithoutWebsiteInput>;
  slug?: Maybe<String>;
  url?: Maybe<String>;
  addedBy?: Maybe<UserUpdateOneRequiredWithoutWebsitesInput>;
  typefaces?: Maybe<TypefaceUpdateManyWithoutUsedByInput>;
  featured?: Maybe<Boolean>;
}

export type FileWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  url?: Maybe<String>;
}>;

export interface UserUpdateOneRequiredWithoutWebsitesInput {
  create?: Maybe<UserCreateWithoutWebsitesInput>;
  update?: Maybe<UserUpdateWithoutWebsitesDataInput>;
  upsert?: Maybe<UserUpsertWithoutWebsitesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface TypefaceUpdateInput {
  name?: Maybe<String>;
  downloadUrl?: Maybe<String>;
  description?: Maybe<String>;
  slug?: Maybe<String>;
  usedBy?: Maybe<WebsiteUpdateManyWithoutTypefacesInput>;
  addedBy?: Maybe<UserUpdateOneRequiredWithoutTypefacesInput>;
  foundries?: Maybe<FoundryUpdateManyWithoutTypefacesInput>;
  designers?: Maybe<DesignerUpdateManyWithoutTypefacesInput>;
  tags?: Maybe<TagUpdateManyWithoutTypefaceInput>;
  images?: Maybe<ImagesUpdateOneWithoutTypefaceInput>;
}

export interface UserUpdateWithoutWebsitesDataInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  name?: Maybe<String>;
  role?: Maybe<Role>;
  typefaces?: Maybe<TypefaceUpdateManyWithoutAddedByInput>;
}

export interface TagUpdateInput {
  name?: Maybe<String>;
  website?: Maybe<WebsiteUpdateManyWithoutTagsInput>;
  typeface?: Maybe<TypefaceUpdateManyWithoutTagsInput>;
}

export interface UserUpsertWithoutWebsitesInput {
  update: UserUpdateWithoutWebsitesDataInput;
  create: UserCreateWithoutWebsitesInput;
}

export interface ImagesUpdateInput {
  website?: Maybe<WebsiteUpdateOneWithoutImagesInput>;
  thumbnail?: Maybe<FileUpdateOneInput>;
  full?: Maybe<FileUpdateOneInput>;
  typeface?: Maybe<TypefaceUpdateOneWithoutImagesInput>;
}

export interface WebsiteUpsertWithWhereUniqueWithoutTagsInput {
  where: WebsiteWhereUniqueInput;
  update: WebsiteUpdateWithoutTagsDataInput;
  create: WebsiteCreateWithoutTagsInput;
}

export interface TypefaceUpsertWithWhereUniqueWithoutFoundriesInput {
  where: TypefaceWhereUniqueInput;
  update: TypefaceUpdateWithoutFoundriesDataInput;
  create: TypefaceCreateWithoutFoundriesInput;
}

export interface WebsiteScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  isPublished_not?: Maybe<Boolean>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  slug?: Maybe<String>;
  slug_not?: Maybe<String>;
  slug_in?: Maybe<String[] | String>;
  slug_not_in?: Maybe<String[] | String>;
  slug_lt?: Maybe<String>;
  slug_lte?: Maybe<String>;
  slug_gt?: Maybe<String>;
  slug_gte?: Maybe<String>;
  slug_contains?: Maybe<String>;
  slug_not_contains?: Maybe<String>;
  slug_starts_with?: Maybe<String>;
  slug_not_starts_with?: Maybe<String>;
  slug_ends_with?: Maybe<String>;
  slug_not_ends_with?: Maybe<String>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  featured?: Maybe<Boolean>;
  featured_not?: Maybe<Boolean>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<WebsiteScalarWhereInput[] | WebsiteScalarWhereInput>;
  OR?: Maybe<WebsiteScalarWhereInput[] | WebsiteScalarWhereInput>;
  NOT?: Maybe<WebsiteScalarWhereInput[] | WebsiteScalarWhereInput>;
}

export interface TypefaceUpdateManyWithoutFoundriesInput {
  create?: Maybe<
    TypefaceCreateWithoutFoundriesInput[] | TypefaceCreateWithoutFoundriesInput
  >;
  delete?: Maybe<TypefaceWhereUniqueInput[] | TypefaceWhereUniqueInput>;
  connect?: Maybe<TypefaceWhereUniqueInput[] | TypefaceWhereUniqueInput>;
  set?: Maybe<TypefaceWhereUniqueInput[] | TypefaceWhereUniqueInput>;
  disconnect?: Maybe<TypefaceWhereUniqueInput[] | TypefaceWhereUniqueInput>;
  update?: Maybe<
    | TypefaceUpdateWithWhereUniqueWithoutFoundriesInput[]
    | TypefaceUpdateWithWhereUniqueWithoutFoundriesInput
  >;
  upsert?: Maybe<
    | TypefaceUpsertWithWhereUniqueWithoutFoundriesInput[]
    | TypefaceUpsertWithWhereUniqueWithoutFoundriesInput
  >;
  deleteMany?: Maybe<TypefaceScalarWhereInput[] | TypefaceScalarWhereInput>;
  updateMany?: Maybe<
    | TypefaceUpdateManyWithWhereNestedInput[]
    | TypefaceUpdateManyWithWhereNestedInput
  >;
}

export interface WebsiteUpdateManyWithWhereNestedInput {
  where: WebsiteScalarWhereInput;
  data: WebsiteUpdateManyDataInput;
}

export interface TypefaceCreateManyWithoutFoundriesInput {
  create?: Maybe<
    TypefaceCreateWithoutFoundriesInput[] | TypefaceCreateWithoutFoundriesInput
  >;
  connect?: Maybe<TypefaceWhereUniqueInput[] | TypefaceWhereUniqueInput>;
}

export interface WebsiteUpdateManyDataInput {
  isPublished?: Maybe<Boolean>;
  title?: Maybe<String>;
  slug?: Maybe<String>;
  url?: Maybe<String>;
  featured?: Maybe<Boolean>;
}

export interface FileUpdateInput {
  filename?: Maybe<String>;
  mimetype?: Maybe<String>;
  encoding?: Maybe<String>;
  url?: Maybe<String>;
}

export interface TagUpsertWithWhereUniqueWithoutTypefaceInput {
  where: TagWhereUniqueInput;
  update: TagUpdateWithoutTypefaceDataInput;
  create: TagCreateWithoutTypefaceInput;
}

export interface DesignerCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  url: String;
  typefaces?: Maybe<TypefaceCreateManyWithoutDesignersInput>;
  addedBy: UserCreateOneInput;
}

export interface TagScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<TagScalarWhereInput[] | TagScalarWhereInput>;
  OR?: Maybe<TagScalarWhereInput[] | TagScalarWhereInput>;
  NOT?: Maybe<TagScalarWhereInput[] | TagScalarWhereInput>;
}

export interface WebsiteCreateWithoutTypefacesInput {
  id?: Maybe<ID_Input>;
  isPublished?: Maybe<Boolean>;
  title: String;
  images?: Maybe<ImagesCreateOneWithoutWebsiteInput>;
  slug?: Maybe<String>;
  url: String;
  addedBy: UserCreateOneWithoutWebsitesInput;
  featured?: Maybe<Boolean>;
  tags?: Maybe<TagCreateManyWithoutWebsiteInput>;
}

export interface TagUpdateManyWithWhereNestedInput {
  where: TagScalarWhereInput;
  data: TagUpdateManyDataInput;
}

export interface FileCreateInput {
  id?: Maybe<ID_Input>;
  filename: String;
  mimetype: String;
  encoding: String;
  url: String;
}

export interface TagUpdateManyDataInput {
  name?: Maybe<String>;
}

export interface UserCreateWithoutTypefacesInput {
  id?: Maybe<ID_Input>;
  email: String;
  password: String;
  name: String;
  role?: Maybe<Role>;
  websites?: Maybe<WebsiteCreateManyWithoutAddedByInput>;
}

export interface ImagesUpdateOneWithoutTypefaceInput {
  create?: Maybe<ImagesCreateWithoutTypefaceInput>;
  update?: Maybe<ImagesUpdateWithoutTypefaceDataInput>;
  upsert?: Maybe<ImagesUpsertWithoutTypefaceInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ImagesWhereUniqueInput>;
}

export interface TypefaceCreateWithoutUsedByInput {
  id?: Maybe<ID_Input>;
  name: String;
  downloadUrl: String;
  description?: Maybe<String>;
  slug: String;
  addedBy: UserCreateOneWithoutTypefacesInput;
  foundries?: Maybe<FoundryCreateManyWithoutTypefacesInput>;
  designers?: Maybe<DesignerCreateManyWithoutTypefacesInput>;
  tags?: Maybe<TagCreateManyWithoutTypefaceInput>;
  images?: Maybe<ImagesCreateOneWithoutTypefaceInput>;
}

export interface ImagesUpdateWithoutTypefaceDataInput {
  website?: Maybe<WebsiteUpdateOneWithoutImagesInput>;
  thumbnail?: Maybe<FileUpdateOneInput>;
  full?: Maybe<FileUpdateOneInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  email: String;
  password: String;
  name: String;
  role?: Maybe<Role>;
  websites?: Maybe<WebsiteCreateManyWithoutAddedByInput>;
  typefaces?: Maybe<TypefaceCreateManyWithoutAddedByInput>;
}

export interface WebsiteUpdateOneWithoutImagesInput {
  create?: Maybe<WebsiteCreateWithoutImagesInput>;
  update?: Maybe<WebsiteUpdateWithoutImagesDataInput>;
  upsert?: Maybe<WebsiteUpsertWithoutImagesInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<WebsiteWhereUniqueInput>;
}

export interface DesignerCreateWithoutTypefacesInput {
  id?: Maybe<ID_Input>;
  name: String;
  url: String;
  addedBy: UserCreateOneInput;
}

export interface WebsiteUpdateWithoutImagesDataInput {
  isPublished?: Maybe<Boolean>;
  title?: Maybe<String>;
  slug?: Maybe<String>;
  url?: Maybe<String>;
  addedBy?: Maybe<UserUpdateOneRequiredWithoutWebsitesInput>;
  typefaces?: Maybe<TypefaceUpdateManyWithoutUsedByInput>;
  featured?: Maybe<Boolean>;
  tags?: Maybe<TagUpdateManyWithoutWebsiteInput>;
}

export interface WebsiteCreateWithoutTagsInput {
  id?: Maybe<ID_Input>;
  isPublished?: Maybe<Boolean>;
  title: String;
  images?: Maybe<ImagesCreateOneWithoutWebsiteInput>;
  slug?: Maybe<String>;
  url: String;
  addedBy: UserCreateOneWithoutWebsitesInput;
  typefaces?: Maybe<TypefaceCreateManyWithoutUsedByInput>;
  featured?: Maybe<Boolean>;
}

export interface TagUpdateManyWithoutWebsiteInput {
  create?: Maybe<TagCreateWithoutWebsiteInput[] | TagCreateWithoutWebsiteInput>;
  delete?: Maybe<TagWhereUniqueInput[] | TagWhereUniqueInput>;
  connect?: Maybe<TagWhereUniqueInput[] | TagWhereUniqueInput>;
  set?: Maybe<TagWhereUniqueInput[] | TagWhereUniqueInput>;
  disconnect?: Maybe<TagWhereUniqueInput[] | TagWhereUniqueInput>;
  update?: Maybe<
    | TagUpdateWithWhereUniqueWithoutWebsiteInput[]
    | TagUpdateWithWhereUniqueWithoutWebsiteInput
  >;
  upsert?: Maybe<
    | TagUpsertWithWhereUniqueWithoutWebsiteInput[]
    | TagUpsertWithWhereUniqueWithoutWebsiteInput
  >;
  deleteMany?: Maybe<TagScalarWhereInput[] | TagScalarWhereInput>;
  updateMany?: Maybe<
    TagUpdateManyWithWhereNestedInput[] | TagUpdateManyWithWhereNestedInput
  >;
}

export interface ImagesCreateWithoutTypefaceInput {
  id?: Maybe<ID_Input>;
  website?: Maybe<WebsiteCreateOneWithoutImagesInput>;
  thumbnail?: Maybe<FileCreateOneInput>;
  full?: Maybe<FileCreateOneInput>;
}

export interface TagUpdateWithWhereUniqueWithoutWebsiteInput {
  where: TagWhereUniqueInput;
  data: TagUpdateWithoutWebsiteDataInput;
}

export interface FileWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  filename?: Maybe<String>;
  filename_not?: Maybe<String>;
  filename_in?: Maybe<String[] | String>;
  filename_not_in?: Maybe<String[] | String>;
  filename_lt?: Maybe<String>;
  filename_lte?: Maybe<String>;
  filename_gt?: Maybe<String>;
  filename_gte?: Maybe<String>;
  filename_contains?: Maybe<String>;
  filename_not_contains?: Maybe<String>;
  filename_starts_with?: Maybe<String>;
  filename_not_starts_with?: Maybe<String>;
  filename_ends_with?: Maybe<String>;
  filename_not_ends_with?: Maybe<String>;
  mimetype?: Maybe<String>;
  mimetype_not?: Maybe<String>;
  mimetype_in?: Maybe<String[] | String>;
  mimetype_not_in?: Maybe<String[] | String>;
  mimetype_lt?: Maybe<String>;
  mimetype_lte?: Maybe<String>;
  mimetype_gt?: Maybe<String>;
  mimetype_gte?: Maybe<String>;
  mimetype_contains?: Maybe<String>;
  mimetype_not_contains?: Maybe<String>;
  mimetype_starts_with?: Maybe<String>;
  mimetype_not_starts_with?: Maybe<String>;
  mimetype_ends_with?: Maybe<String>;
  mimetype_not_ends_with?: Maybe<String>;
  encoding?: Maybe<String>;
  encoding_not?: Maybe<String>;
  encoding_in?: Maybe<String[] | String>;
  encoding_not_in?: Maybe<String[] | String>;
  encoding_lt?: Maybe<String>;
  encoding_lte?: Maybe<String>;
  encoding_gt?: Maybe<String>;
  encoding_gte?: Maybe<String>;
  encoding_contains?: Maybe<String>;
  encoding_not_contains?: Maybe<String>;
  encoding_starts_with?: Maybe<String>;
  encoding_not_starts_with?: Maybe<String>;
  encoding_ends_with?: Maybe<String>;
  encoding_not_ends_with?: Maybe<String>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  AND?: Maybe<FileWhereInput[] | FileWhereInput>;
  OR?: Maybe<FileWhereInput[] | FileWhereInput>;
  NOT?: Maybe<FileWhereInput[] | FileWhereInput>;
}

export interface TagUpdateWithoutWebsiteDataInput {
  name?: Maybe<String>;
  typeface?: Maybe<TypefaceUpdateManyWithoutTagsInput>;
}

export interface FileSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<FileWhereInput>;
  AND?: Maybe<FileSubscriptionWhereInput[] | FileSubscriptionWhereInput>;
  OR?: Maybe<FileSubscriptionWhereInput[] | FileSubscriptionWhereInput>;
  NOT?: Maybe<FileSubscriptionWhereInput[] | FileSubscriptionWhereInput>;
}

export interface TypefaceUpdateManyWithoutTagsInput {
  create?: Maybe<
    TypefaceCreateWithoutTagsInput[] | TypefaceCreateWithoutTagsInput
  >;
  delete?: Maybe<TypefaceWhereUniqueInput[] | TypefaceWhereUniqueInput>;
  connect?: Maybe<TypefaceWhereUniqueInput[] | TypefaceWhereUniqueInput>;
  set?: Maybe<TypefaceWhereUniqueInput[] | TypefaceWhereUniqueInput>;
  disconnect?: Maybe<TypefaceWhereUniqueInput[] | TypefaceWhereUniqueInput>;
  update?: Maybe<
    | TypefaceUpdateWithWhereUniqueWithoutTagsInput[]
    | TypefaceUpdateWithWhereUniqueWithoutTagsInput
  >;
  upsert?: Maybe<
    | TypefaceUpsertWithWhereUniqueWithoutTagsInput[]
    | TypefaceUpsertWithWhereUniqueWithoutTagsInput
  >;
  deleteMany?: Maybe<TypefaceScalarWhereInput[] | TypefaceScalarWhereInput>;
  updateMany?: Maybe<
    | TypefaceUpdateManyWithWhereNestedInput[]
    | TypefaceUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  name?: Maybe<String>;
  role?: Maybe<Role>;
  websites?: Maybe<WebsiteUpdateManyWithoutAddedByInput>;
  typefaces?: Maybe<TypefaceUpdateManyWithoutAddedByInput>;
}

export interface TypefaceUpdateWithWhereUniqueWithoutTagsInput {
  where: TypefaceWhereUniqueInput;
  data: TypefaceUpdateWithoutTagsDataInput;
}

export interface TypefaceWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  downloadUrl?: Maybe<String>;
  downloadUrl_not?: Maybe<String>;
  downloadUrl_in?: Maybe<String[] | String>;
  downloadUrl_not_in?: Maybe<String[] | String>;
  downloadUrl_lt?: Maybe<String>;
  downloadUrl_lte?: Maybe<String>;
  downloadUrl_gt?: Maybe<String>;
  downloadUrl_gte?: Maybe<String>;
  downloadUrl_contains?: Maybe<String>;
  downloadUrl_not_contains?: Maybe<String>;
  downloadUrl_starts_with?: Maybe<String>;
  downloadUrl_not_starts_with?: Maybe<String>;
  downloadUrl_ends_with?: Maybe<String>;
  downloadUrl_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  slug?: Maybe<String>;
  slug_not?: Maybe<String>;
  slug_in?: Maybe<String[] | String>;
  slug_not_in?: Maybe<String[] | String>;
  slug_lt?: Maybe<String>;
  slug_lte?: Maybe<String>;
  slug_gt?: Maybe<String>;
  slug_gte?: Maybe<String>;
  slug_contains?: Maybe<String>;
  slug_not_contains?: Maybe<String>;
  slug_starts_with?: Maybe<String>;
  slug_not_starts_with?: Maybe<String>;
  slug_ends_with?: Maybe<String>;
  slug_not_ends_with?: Maybe<String>;
  usedBy_every?: Maybe<WebsiteWhereInput>;
  usedBy_some?: Maybe<WebsiteWhereInput>;
  usedBy_none?: Maybe<WebsiteWhereInput>;
  addedBy?: Maybe<UserWhereInput>;
  foundries_every?: Maybe<FoundryWhereInput>;
  foundries_some?: Maybe<FoundryWhereInput>;
  foundries_none?: Maybe<FoundryWhereInput>;
  designers_every?: Maybe<DesignerWhereInput>;
  designers_some?: Maybe<DesignerWhereInput>;
  designers_none?: Maybe<DesignerWhereInput>;
  tags_every?: Maybe<TagWhereInput>;
  tags_some?: Maybe<TagWhereInput>;
  tags_none?: Maybe<TagWhereInput>;
  images?: Maybe<ImagesWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<TypefaceWhereInput[] | TypefaceWhereInput>;
  OR?: Maybe<TypefaceWhereInput[] | TypefaceWhereInput>;
  NOT?: Maybe<TypefaceWhereInput[] | TypefaceWhereInput>;
}

export interface TypefaceUpdateWithoutTagsDataInput {
  name?: Maybe<String>;
  downloadUrl?: Maybe<String>;
  description?: Maybe<String>;
  slug?: Maybe<String>;
  usedBy?: Maybe<WebsiteUpdateManyWithoutTypefacesInput>;
  addedBy?: Maybe<UserUpdateOneRequiredWithoutTypefacesInput>;
  foundries?: Maybe<FoundryUpdateManyWithoutTypefacesInput>;
  designers?: Maybe<DesignerUpdateManyWithoutTypefacesInput>;
  images?: Maybe<ImagesUpdateOneWithoutTypefaceInput>;
}

export type TypefaceWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  name?: Maybe<String>;
  slug?: Maybe<String>;
}>;

export interface TypefaceUpsertWithWhereUniqueWithoutTagsInput {
  where: TypefaceWhereUniqueInput;
  update: TypefaceUpdateWithoutTagsDataInput;
  create: TypefaceCreateWithoutTagsInput;
}

export interface FileUpdateManyMutationInput {
  filename?: Maybe<String>;
  mimetype?: Maybe<String>;
  encoding?: Maybe<String>;
  url?: Maybe<String>;
}

export interface TypefaceScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  downloadUrl?: Maybe<String>;
  downloadUrl_not?: Maybe<String>;
  downloadUrl_in?: Maybe<String[] | String>;
  downloadUrl_not_in?: Maybe<String[] | String>;
  downloadUrl_lt?: Maybe<String>;
  downloadUrl_lte?: Maybe<String>;
  downloadUrl_gt?: Maybe<String>;
  downloadUrl_gte?: Maybe<String>;
  downloadUrl_contains?: Maybe<String>;
  downloadUrl_not_contains?: Maybe<String>;
  downloadUrl_starts_with?: Maybe<String>;
  downloadUrl_not_starts_with?: Maybe<String>;
  downloadUrl_ends_with?: Maybe<String>;
  downloadUrl_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  slug?: Maybe<String>;
  slug_not?: Maybe<String>;
  slug_in?: Maybe<String[] | String>;
  slug_not_in?: Maybe<String[] | String>;
  slug_lt?: Maybe<String>;
  slug_lte?: Maybe<String>;
  slug_gt?: Maybe<String>;
  slug_gte?: Maybe<String>;
  slug_contains?: Maybe<String>;
  slug_not_contains?: Maybe<String>;
  slug_starts_with?: Maybe<String>;
  slug_not_starts_with?: Maybe<String>;
  slug_ends_with?: Maybe<String>;
  slug_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<TypefaceScalarWhereInput[] | TypefaceScalarWhereInput>;
  OR?: Maybe<TypefaceScalarWhereInput[] | TypefaceScalarWhereInput>;
  NOT?: Maybe<TypefaceScalarWhereInput[] | TypefaceScalarWhereInput>;
}

export interface TypefaceCreateWithoutDesignersInput {
  id?: Maybe<ID_Input>;
  name: String;
  downloadUrl: String;
  description?: Maybe<String>;
  slug: String;
  usedBy?: Maybe<WebsiteCreateManyWithoutTypefacesInput>;
  addedBy: UserCreateOneWithoutTypefacesInput;
  foundries?: Maybe<FoundryCreateManyWithoutTypefacesInput>;
  tags?: Maybe<TagCreateManyWithoutTypefaceInput>;
  images?: Maybe<ImagesCreateOneWithoutTypefaceInput>;
}

export interface TypefaceUpdateManyWithWhereNestedInput {
  where: TypefaceScalarWhereInput;
  data: TypefaceUpdateManyDataInput;
}

export interface TypefaceCreateWithoutImagesInput {
  id?: Maybe<ID_Input>;
  name: String;
  downloadUrl: String;
  description?: Maybe<String>;
  slug: String;
  usedBy?: Maybe<WebsiteCreateManyWithoutTypefacesInput>;
  addedBy: UserCreateOneWithoutTypefacesInput;
  foundries?: Maybe<FoundryCreateManyWithoutTypefacesInput>;
  designers?: Maybe<DesignerCreateManyWithoutTypefacesInput>;
  tags?: Maybe<TagCreateManyWithoutTypefaceInput>;
}

export interface TypefaceUpdateManyDataInput {
  name?: Maybe<String>;
  downloadUrl?: Maybe<String>;
  description?: Maybe<String>;
  slug?: Maybe<String>;
}

export interface FoundryCreateWithoutTypefacesInput {
  id?: Maybe<ID_Input>;
  name: String;
  url: String;
  addedBy: UserCreateOneInput;
}

export interface TagUpsertWithWhereUniqueWithoutWebsiteInput {
  where: TagWhereUniqueInput;
  update: TagUpdateWithoutWebsiteDataInput;
  create: TagCreateWithoutWebsiteInput;
}

export interface TagCreateWithoutTypefaceInput {
  id?: Maybe<ID_Input>;
  name: String;
  website?: Maybe<WebsiteCreateManyWithoutTagsInput>;
}

export interface WebsiteUpsertWithoutImagesInput {
  update: WebsiteUpdateWithoutImagesDataInput;
  create: WebsiteCreateWithoutImagesInput;
}

export interface WebsiteCreateWithoutImagesInput {
  id?: Maybe<ID_Input>;
  isPublished?: Maybe<Boolean>;
  title: String;
  slug?: Maybe<String>;
  url: String;
  addedBy: UserCreateOneWithoutWebsitesInput;
  typefaces?: Maybe<TypefaceCreateManyWithoutUsedByInput>;
  featured?: Maybe<Boolean>;
  tags?: Maybe<TagCreateManyWithoutWebsiteInput>;
}

export interface ImagesUpsertWithoutTypefaceInput {
  update: ImagesUpdateWithoutTypefaceDataInput;
  create: ImagesCreateWithoutTypefaceInput;
}

export interface WebsiteCreateInput {
  id?: Maybe<ID_Input>;
  isPublished?: Maybe<Boolean>;
  title: String;
  images?: Maybe<ImagesCreateOneWithoutWebsiteInput>;
  slug?: Maybe<String>;
  url: String;
  addedBy: UserCreateOneWithoutWebsitesInput;
  typefaces?: Maybe<TypefaceCreateManyWithoutUsedByInput>;
  featured?: Maybe<Boolean>;
  tags?: Maybe<TagCreateManyWithoutWebsiteInput>;
}

export interface TypefaceUpsertWithWhereUniqueWithoutAddedByInput {
  where: TypefaceWhereUniqueInput;
  update: TypefaceUpdateWithoutAddedByDataInput;
  create: TypefaceCreateWithoutAddedByInput;
}

export type TagWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface TypefaceUpsertWithWhereUniqueWithoutDesignersInput {
  where: TypefaceWhereUniqueInput;
  update: TypefaceUpdateWithoutDesignersDataInput;
  create: TypefaceCreateWithoutDesignersInput;
}

export interface FoundryUpsertWithWhereUniqueWithoutTypefacesInput {
  where: FoundryWhereUniqueInput;
  update: FoundryUpdateWithoutTypefacesDataInput;
  create: FoundryCreateWithoutTypefacesInput;
}

export interface WebsiteCreateWithoutAddedByInput {
  id?: Maybe<ID_Input>;
  isPublished?: Maybe<Boolean>;
  title: String;
  images?: Maybe<ImagesCreateOneWithoutWebsiteInput>;
  slug?: Maybe<String>;
  url: String;
  typefaces?: Maybe<TypefaceCreateManyWithoutUsedByInput>;
  featured?: Maybe<Boolean>;
  tags?: Maybe<TagCreateManyWithoutWebsiteInput>;
}

export interface FoundryScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<FoundryScalarWhereInput[] | FoundryScalarWhereInput>;
  OR?: Maybe<FoundryScalarWhereInput[] | FoundryScalarWhereInput>;
  NOT?: Maybe<FoundryScalarWhereInput[] | FoundryScalarWhereInput>;
}

export interface UserCreateWithoutWebsitesInput {
  id?: Maybe<ID_Input>;
  email: String;
  password: String;
  name: String;
  role?: Maybe<Role>;
  typefaces?: Maybe<TypefaceCreateManyWithoutAddedByInput>;
}

export interface FoundryUpdateManyWithWhereNestedInput {
  where: FoundryScalarWhereInput;
  data: FoundryUpdateManyDataInput;
}

export interface TypefaceCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  downloadUrl: String;
  description?: Maybe<String>;
  slug: String;
  usedBy?: Maybe<WebsiteCreateManyWithoutTypefacesInput>;
  addedBy: UserCreateOneWithoutTypefacesInput;
  foundries?: Maybe<FoundryCreateManyWithoutTypefacesInput>;
  designers?: Maybe<DesignerCreateManyWithoutTypefacesInput>;
  tags?: Maybe<TagCreateManyWithoutTypefaceInput>;
  images?: Maybe<ImagesCreateOneWithoutTypefaceInput>;
}

export interface UserUpsertWithoutTypefacesInput {
  update: UserUpdateWithoutTypefacesDataInput;
  create: UserCreateWithoutTypefacesInput;
}

export interface WebsiteUpsertWithWhereUniqueWithoutAddedByInput {
  where: WebsiteWhereUniqueInput;
  update: WebsiteUpdateWithoutAddedByDataInput;
  create: WebsiteCreateWithoutAddedByInput;
}

export interface TypefaceUpsertWithWhereUniqueWithoutUsedByInput {
  where: TypefaceWhereUniqueInput;
  update: TypefaceUpdateWithoutUsedByDataInput;
  create: TypefaceCreateWithoutUsedByInput;
}

export interface FoundryUpdateManyDataInput {
  name?: Maybe<String>;
  url?: Maybe<String>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface TagSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<TagWhereInput>;
  AND?: Maybe<TagSubscriptionWhereInput[] | TagSubscriptionWhereInput>;
  OR?: Maybe<TagSubscriptionWhereInput[] | TagSubscriptionWhereInput>;
  NOT?: Maybe<TagSubscriptionWhereInput[] | TagSubscriptionWhereInput>;
}

export interface TypefaceCreateWithoutAddedByInput {
  id?: Maybe<ID_Input>;
  name: String;
  downloadUrl: String;
  description?: Maybe<String>;
  slug: String;
  usedBy?: Maybe<WebsiteCreateManyWithoutTypefacesInput>;
  foundries?: Maybe<FoundryCreateManyWithoutTypefacesInput>;
  designers?: Maybe<DesignerCreateManyWithoutTypefacesInput>;
  tags?: Maybe<TagCreateManyWithoutTypefaceInput>;
  images?: Maybe<ImagesCreateOneWithoutTypefaceInput>;
}

export interface ImagesCreateWithoutWebsiteInput {
  id?: Maybe<ID_Input>;
  thumbnail?: Maybe<FileCreateOneInput>;
  full?: Maybe<FileCreateOneInput>;
  typeface?: Maybe<TypefaceCreateOneWithoutImagesInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface WebsitePreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  isPublished: Boolean;
  title: String;
  slug?: String;
  url: String;
  featured: Boolean;
  updatedAt: DateTimeOutput;
}

export interface WebsitePreviousValuesPromise
  extends Promise<WebsitePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  isPublished: () => Promise<Boolean>;
  title: () => Promise<String>;
  slug: () => Promise<String>;
  url: () => Promise<String>;
  featured: () => Promise<Boolean>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface WebsitePreviousValuesSubscription
  extends Promise<AsyncIterator<WebsitePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  isPublished: () => Promise<AsyncIterator<Boolean>>;
  title: () => Promise<AsyncIterator<String>>;
  slug: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
  featured: () => Promise<AsyncIterator<Boolean>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface DesignerEdge {
  node: Designer;
  cursor: String;
}

export interface DesignerEdgePromise
  extends Promise<DesignerEdge>,
    Fragmentable {
  node: <T = DesignerPromise>() => T;
  cursor: () => Promise<String>;
}

export interface DesignerEdgeSubscription
  extends Promise<AsyncIterator<DesignerEdge>>,
    Fragmentable {
  node: <T = DesignerSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Typeface {
  id: ID_Output;
  name: String;
  downloadUrl: String;
  description?: String;
  slug: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface TypefacePromise extends Promise<Typeface>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  downloadUrl: () => Promise<String>;
  description: () => Promise<String>;
  slug: () => Promise<String>;
  usedBy: <T = FragmentableArray<Website>>(args?: {
    where?: WebsiteWhereInput;
    orderBy?: WebsiteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  addedBy: <T = UserPromise>() => T;
  foundries: <T = FragmentableArray<Foundry>>(args?: {
    where?: FoundryWhereInput;
    orderBy?: FoundryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  designers: <T = FragmentableArray<Designer>>(args?: {
    where?: DesignerWhereInput;
    orderBy?: DesignerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  tags: <T = FragmentableArray<Tag>>(args?: {
    where?: TagWhereInput;
    orderBy?: TagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  images: <T = ImagesPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface TypefaceSubscription
  extends Promise<AsyncIterator<Typeface>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  downloadUrl: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  slug: () => Promise<AsyncIterator<String>>;
  usedBy: <T = Promise<AsyncIterator<WebsiteSubscription>>>(args?: {
    where?: WebsiteWhereInput;
    orderBy?: WebsiteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  addedBy: <T = UserSubscription>() => T;
  foundries: <T = Promise<AsyncIterator<FoundrySubscription>>>(args?: {
    where?: FoundryWhereInput;
    orderBy?: FoundryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  designers: <T = Promise<AsyncIterator<DesignerSubscription>>>(args?: {
    where?: DesignerWhereInput;
    orderBy?: DesignerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  tags: <T = Promise<AsyncIterator<TagSubscription>>>(args?: {
    where?: TagWhereInput;
    orderBy?: TagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  images: <T = ImagesSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface TypefaceNullablePromise
  extends Promise<Typeface | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  downloadUrl: () => Promise<String>;
  description: () => Promise<String>;
  slug: () => Promise<String>;
  usedBy: <T = FragmentableArray<Website>>(args?: {
    where?: WebsiteWhereInput;
    orderBy?: WebsiteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  addedBy: <T = UserPromise>() => T;
  foundries: <T = FragmentableArray<Foundry>>(args?: {
    where?: FoundryWhereInput;
    orderBy?: FoundryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  designers: <T = FragmentableArray<Designer>>(args?: {
    where?: DesignerWhereInput;
    orderBy?: DesignerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  tags: <T = FragmentableArray<Tag>>(args?: {
    where?: TagWhereInput;
    orderBy?: TagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  images: <T = ImagesPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateWebsite {
  count: Int;
}

export interface AggregateWebsitePromise
  extends Promise<AggregateWebsite>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateWebsiteSubscription
  extends Promise<AsyncIterator<AggregateWebsite>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface DesignerConnection {
  pageInfo: PageInfo;
  edges: DesignerEdge[];
}

export interface DesignerConnectionPromise
  extends Promise<DesignerConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<DesignerEdge>>() => T;
  aggregate: <T = AggregateDesignerPromise>() => T;
}

export interface DesignerConnectionSubscription
  extends Promise<AsyncIterator<DesignerConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<DesignerEdgeSubscription>>>() => T;
  aggregate: <T = AggregateDesignerSubscription>() => T;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface WebsiteEdge {
  node: Website;
  cursor: String;
}

export interface WebsiteEdgePromise extends Promise<WebsiteEdge>, Fragmentable {
  node: <T = WebsitePromise>() => T;
  cursor: () => Promise<String>;
}

export interface WebsiteEdgeSubscription
  extends Promise<AsyncIterator<WebsiteEdge>>,
    Fragmentable {
  node: <T = WebsiteSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Images {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ImagesPromise extends Promise<Images>, Fragmentable {
  id: () => Promise<ID_Output>;
  website: <T = WebsitePromise>() => T;
  thumbnail: <T = FilePromise>() => T;
  full: <T = FilePromise>() => T;
  typeface: <T = TypefacePromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ImagesSubscription
  extends Promise<AsyncIterator<Images>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  website: <T = WebsiteSubscription>() => T;
  thumbnail: <T = FileSubscription>() => T;
  full: <T = FileSubscription>() => T;
  typeface: <T = TypefaceSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ImagesNullablePromise
  extends Promise<Images | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  website: <T = WebsitePromise>() => T;
  thumbnail: <T = FilePromise>() => T;
  full: <T = FilePromise>() => T;
  typeface: <T = TypefacePromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Website {
  id: ID_Output;
  createdAt: DateTimeOutput;
  isPublished: Boolean;
  title: String;
  slug?: String;
  url: String;
  featured: Boolean;
  updatedAt: DateTimeOutput;
}

export interface WebsitePromise extends Promise<Website>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  isPublished: () => Promise<Boolean>;
  title: () => Promise<String>;
  images: <T = ImagesPromise>() => T;
  slug: () => Promise<String>;
  url: () => Promise<String>;
  addedBy: <T = UserPromise>() => T;
  typefaces: <T = FragmentableArray<Typeface>>(args?: {
    where?: TypefaceWhereInput;
    orderBy?: TypefaceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  featured: () => Promise<Boolean>;
  tags: <T = FragmentableArray<Tag>>(args?: {
    where?: TagWhereInput;
    orderBy?: TagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface WebsiteSubscription
  extends Promise<AsyncIterator<Website>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  isPublished: () => Promise<AsyncIterator<Boolean>>;
  title: () => Promise<AsyncIterator<String>>;
  images: <T = ImagesSubscription>() => T;
  slug: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
  addedBy: <T = UserSubscription>() => T;
  typefaces: <T = Promise<AsyncIterator<TypefaceSubscription>>>(args?: {
    where?: TypefaceWhereInput;
    orderBy?: TypefaceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  featured: () => Promise<AsyncIterator<Boolean>>;
  tags: <T = Promise<AsyncIterator<TagSubscription>>>(args?: {
    where?: TagWhereInput;
    orderBy?: TagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface WebsiteNullablePromise
  extends Promise<Website | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  isPublished: () => Promise<Boolean>;
  title: () => Promise<String>;
  images: <T = ImagesPromise>() => T;
  slug: () => Promise<String>;
  url: () => Promise<String>;
  addedBy: <T = UserPromise>() => T;
  typefaces: <T = FragmentableArray<Typeface>>(args?: {
    where?: TypefaceWhereInput;
    orderBy?: TypefaceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  featured: () => Promise<Boolean>;
  tags: <T = FragmentableArray<Tag>>(args?: {
    where?: TagWhereInput;
    orderBy?: TagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface WebsiteConnection {
  pageInfo: PageInfo;
  edges: WebsiteEdge[];
}

export interface WebsiteConnectionPromise
  extends Promise<WebsiteConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<WebsiteEdge>>() => T;
  aggregate: <T = AggregateWebsitePromise>() => T;
}

export interface WebsiteConnectionSubscription
  extends Promise<AsyncIterator<WebsiteConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<WebsiteEdgeSubscription>>>() => T;
  aggregate: <T = AggregateWebsiteSubscription>() => T;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  email: String;
  password: String;
  name: String;
  role: Role;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  name: () => Promise<String>;
  role: () => Promise<Role>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  role: () => Promise<AsyncIterator<Role>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AggregateTypeface {
  count: Int;
}

export interface AggregateTypefacePromise
  extends Promise<AggregateTypeface>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTypefaceSubscription
  extends Promise<AsyncIterator<AggregateTypeface>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface DesignerSubscriptionPayload {
  mutation: MutationType;
  node: Designer;
  updatedFields: String[];
  previousValues: DesignerPreviousValues;
}

export interface DesignerSubscriptionPayloadPromise
  extends Promise<DesignerSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = DesignerPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = DesignerPreviousValuesPromise>() => T;
}

export interface DesignerSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<DesignerSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = DesignerSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = DesignerPreviousValuesSubscription>() => T;
}

export interface TypefaceConnection {
  pageInfo: PageInfo;
  edges: TypefaceEdge[];
}

export interface TypefaceConnectionPromise
  extends Promise<TypefaceConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TypefaceEdge>>() => T;
  aggregate: <T = AggregateTypefacePromise>() => T;
}

export interface TypefaceConnectionSubscription
  extends Promise<AsyncIterator<TypefaceConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TypefaceEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTypefaceSubscription>() => T;
}

export interface DesignerPreviousValues {
  id: ID_Output;
  name: String;
  url: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface DesignerPreviousValuesPromise
  extends Promise<DesignerPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  url: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface DesignerPreviousValuesSubscription
  extends Promise<AsyncIterator<DesignerPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface TagEdge {
  node: Tag;
  cursor: String;
}

export interface TagEdgePromise extends Promise<TagEdge>, Fragmentable {
  node: <T = TagPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TagEdgeSubscription
  extends Promise<AsyncIterator<TagEdge>>,
    Fragmentable {
  node: <T = TagSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Foundry {
  id: ID_Output;
  name: String;
  url: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface FoundryPromise extends Promise<Foundry>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  url: () => Promise<String>;
  typefaces: <T = FragmentableArray<Typeface>>(args?: {
    where?: TypefaceWhereInput;
    orderBy?: TypefaceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  addedBy: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface FoundrySubscription
  extends Promise<AsyncIterator<Foundry>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
  typefaces: <T = Promise<AsyncIterator<TypefaceSubscription>>>(args?: {
    where?: TypefaceWhereInput;
    orderBy?: TypefaceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  addedBy: <T = UserSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface FoundryNullablePromise
  extends Promise<Foundry | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  url: () => Promise<String>;
  typefaces: <T = FragmentableArray<Typeface>>(args?: {
    where?: TypefaceWhereInput;
    orderBy?: TypefaceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  addedBy: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface AggregateImages {
  count: Int;
}

export interface AggregateImagesPromise
  extends Promise<AggregateImages>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateImagesSubscription
  extends Promise<AsyncIterator<AggregateImages>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface FileSubscriptionPayload {
  mutation: MutationType;
  node: File;
  updatedFields: String[];
  previousValues: FilePreviousValues;
}

export interface FileSubscriptionPayloadPromise
  extends Promise<FileSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = FilePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = FilePreviousValuesPromise>() => T;
}

export interface FileSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<FileSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = FileSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = FilePreviousValuesSubscription>() => T;
}

export interface ImagesConnection {
  pageInfo: PageInfo;
  edges: ImagesEdge[];
}

export interface ImagesConnectionPromise
  extends Promise<ImagesConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ImagesEdge>>() => T;
  aggregate: <T = AggregateImagesPromise>() => T;
}

export interface ImagesConnectionSubscription
  extends Promise<AsyncIterator<ImagesConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ImagesEdgeSubscription>>>() => T;
  aggregate: <T = AggregateImagesSubscription>() => T;
}

export interface FilePreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  filename: String;
  mimetype: String;
  encoding: String;
  url: String;
}

export interface FilePreviousValuesPromise
  extends Promise<FilePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  filename: () => Promise<String>;
  mimetype: () => Promise<String>;
  encoding: () => Promise<String>;
  url: () => Promise<String>;
}

export interface FilePreviousValuesSubscription
  extends Promise<AsyncIterator<FilePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  filename: () => Promise<AsyncIterator<String>>;
  mimetype: () => Promise<AsyncIterator<String>>;
  encoding: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
}

export interface FoundryEdge {
  node: Foundry;
  cursor: String;
}

export interface FoundryEdgePromise extends Promise<FoundryEdge>, Fragmentable {
  node: <T = FoundryPromise>() => T;
  cursor: () => Promise<String>;
}

export interface FoundryEdgeSubscription
  extends Promise<AsyncIterator<FoundryEdge>>,
    Fragmentable {
  node: <T = FoundrySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface AggregateFile {
  count: Int;
}

export interface AggregateFilePromise
  extends Promise<AggregateFile>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateFileSubscription
  extends Promise<AsyncIterator<AggregateFile>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface FoundrySubscriptionPayload {
  mutation: MutationType;
  node: Foundry;
  updatedFields: String[];
  previousValues: FoundryPreviousValues;
}

export interface FoundrySubscriptionPayloadPromise
  extends Promise<FoundrySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = FoundryPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = FoundryPreviousValuesPromise>() => T;
}

export interface FoundrySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<FoundrySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = FoundrySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = FoundryPreviousValuesSubscription>() => T;
}

export interface FileConnection {
  pageInfo: PageInfo;
  edges: FileEdge[];
}

export interface FileConnectionPromise
  extends Promise<FileConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<FileEdge>>() => T;
  aggregate: <T = AggregateFilePromise>() => T;
}

export interface FileConnectionSubscription
  extends Promise<AsyncIterator<FileConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<FileEdgeSubscription>>>() => T;
  aggregate: <T = AggregateFileSubscription>() => T;
}

export interface FoundryPreviousValues {
  id: ID_Output;
  name: String;
  url: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface FoundryPreviousValuesPromise
  extends Promise<FoundryPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  url: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface FoundryPreviousValuesSubscription
  extends Promise<AsyncIterator<FoundryPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface WebsiteSubscriptionPayload {
  mutation: MutationType;
  node: Website;
  updatedFields: String[];
  previousValues: WebsitePreviousValues;
}

export interface WebsiteSubscriptionPayloadPromise
  extends Promise<WebsiteSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = WebsitePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = WebsitePreviousValuesPromise>() => T;
}

export interface WebsiteSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<WebsiteSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = WebsiteSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = WebsitePreviousValuesSubscription>() => T;
}

export interface Tag {
  id: ID_Output;
  name: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface TagPromise extends Promise<Tag>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  website: <T = FragmentableArray<Website>>(args?: {
    where?: WebsiteWhereInput;
    orderBy?: WebsiteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  typeface: <T = FragmentableArray<Typeface>>(args?: {
    where?: TypefaceWhereInput;
    orderBy?: TypefaceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface TagSubscription
  extends Promise<AsyncIterator<Tag>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  website: <T = Promise<AsyncIterator<WebsiteSubscription>>>(args?: {
    where?: WebsiteWhereInput;
    orderBy?: WebsiteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  typeface: <T = Promise<AsyncIterator<TypefaceSubscription>>>(args?: {
    where?: TypefaceWhereInput;
    orderBy?: TypefaceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface TagNullablePromise extends Promise<Tag | null>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  website: <T = FragmentableArray<Website>>(args?: {
    where?: WebsiteWhereInput;
    orderBy?: WebsiteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  typeface: <T = FragmentableArray<Typeface>>(args?: {
    where?: TypefaceWhereInput;
    orderBy?: TypefaceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Designer {
  id: ID_Output;
  name: String;
  url: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface DesignerPromise extends Promise<Designer>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  url: () => Promise<String>;
  typefaces: <T = FragmentableArray<Typeface>>(args?: {
    where?: TypefaceWhereInput;
    orderBy?: TypefaceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  addedBy: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface DesignerSubscription
  extends Promise<AsyncIterator<Designer>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
  typefaces: <T = Promise<AsyncIterator<TypefaceSubscription>>>(args?: {
    where?: TypefaceWhereInput;
    orderBy?: TypefaceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  addedBy: <T = UserSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface DesignerNullablePromise
  extends Promise<Designer | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  url: () => Promise<String>;
  typefaces: <T = FragmentableArray<Typeface>>(args?: {
    where?: TypefaceWhereInput;
    orderBy?: TypefaceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  addedBy: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ImagesSubscriptionPayload {
  mutation: MutationType;
  node: Images;
  updatedFields: String[];
  previousValues: ImagesPreviousValues;
}

export interface ImagesSubscriptionPayloadPromise
  extends Promise<ImagesSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ImagesPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ImagesPreviousValuesPromise>() => T;
}

export interface ImagesSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ImagesSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ImagesSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ImagesPreviousValuesSubscription>() => T;
}

export interface AggregateTag {
  count: Int;
}

export interface AggregateTagPromise
  extends Promise<AggregateTag>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTagSubscription
  extends Promise<AsyncIterator<AggregateTag>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ImagesPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ImagesPreviousValuesPromise
  extends Promise<ImagesPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ImagesPreviousValuesSubscription
  extends Promise<AsyncIterator<ImagesPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ImagesEdge {
  node: Images;
  cursor: String;
}

export interface ImagesEdgePromise extends Promise<ImagesEdge>, Fragmentable {
  node: <T = ImagesPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ImagesEdgeSubscription
  extends Promise<AsyncIterator<ImagesEdge>>,
    Fragmentable {
  node: <T = ImagesSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface User {
  id: ID_Output;
  email: String;
  password: String;
  name: String;
  role: Role;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  name: () => Promise<String>;
  role: () => Promise<Role>;
  websites: <T = FragmentableArray<Website>>(args?: {
    where?: WebsiteWhereInput;
    orderBy?: WebsiteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  typefaces: <T = FragmentableArray<Typeface>>(args?: {
    where?: TypefaceWhereInput;
    orderBy?: TypefaceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  role: () => Promise<AsyncIterator<Role>>;
  websites: <T = Promise<AsyncIterator<WebsiteSubscription>>>(args?: {
    where?: WebsiteWhereInput;
    orderBy?: WebsiteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  typefaces: <T = Promise<AsyncIterator<TypefaceSubscription>>>(args?: {
    where?: TypefaceWhereInput;
    orderBy?: TypefaceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  name: () => Promise<String>;
  role: () => Promise<Role>;
  websites: <T = FragmentableArray<Website>>(args?: {
    where?: WebsiteWhereInput;
    orderBy?: WebsiteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  typefaces: <T = FragmentableArray<Typeface>>(args?: {
    where?: TypefaceWhereInput;
    orderBy?: TypefaceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface FoundryConnection {
  pageInfo: PageInfo;
  edges: FoundryEdge[];
}

export interface FoundryConnectionPromise
  extends Promise<FoundryConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<FoundryEdge>>() => T;
  aggregate: <T = AggregateFoundryPromise>() => T;
}

export interface FoundryConnectionSubscription
  extends Promise<AsyncIterator<FoundryConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<FoundryEdgeSubscription>>>() => T;
  aggregate: <T = AggregateFoundrySubscription>() => T;
}

export interface TagSubscriptionPayload {
  mutation: MutationType;
  node: Tag;
  updatedFields: String[];
  previousValues: TagPreviousValues;
}

export interface TagSubscriptionPayloadPromise
  extends Promise<TagSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TagPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TagPreviousValuesPromise>() => T;
}

export interface TagSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TagSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TagSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TagPreviousValuesSubscription>() => T;
}

export interface AggregateDesigner {
  count: Int;
}

export interface AggregateDesignerPromise
  extends Promise<AggregateDesigner>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateDesignerSubscription
  extends Promise<AsyncIterator<AggregateDesigner>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface TypefaceEdge {
  node: Typeface;
  cursor: String;
}

export interface TypefaceEdgePromise
  extends Promise<TypefaceEdge>,
    Fragmentable {
  node: <T = TypefacePromise>() => T;
  cursor: () => Promise<String>;
}

export interface TypefaceEdgeSubscription
  extends Promise<AsyncIterator<TypefaceEdge>>,
    Fragmentable {
  node: <T = TypefaceSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface TypefacePreviousValues {
  id: ID_Output;
  name: String;
  downloadUrl: String;
  description?: String;
  slug: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface TypefacePreviousValuesPromise
  extends Promise<TypefacePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  downloadUrl: () => Promise<String>;
  description: () => Promise<String>;
  slug: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface TypefacePreviousValuesSubscription
  extends Promise<AsyncIterator<TypefacePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  downloadUrl: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  slug: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface TypefaceSubscriptionPayload {
  mutation: MutationType;
  node: Typeface;
  updatedFields: String[];
  previousValues: TypefacePreviousValues;
}

export interface TypefaceSubscriptionPayloadPromise
  extends Promise<TypefaceSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TypefacePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TypefacePreviousValuesPromise>() => T;
}

export interface TypefaceSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TypefaceSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TypefaceSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TypefacePreviousValuesSubscription>() => T;
}

export interface File {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  filename: String;
  mimetype: String;
  encoding: String;
  url: String;
}

export interface FilePromise extends Promise<File>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  filename: () => Promise<String>;
  mimetype: () => Promise<String>;
  encoding: () => Promise<String>;
  url: () => Promise<String>;
}

export interface FileSubscription
  extends Promise<AsyncIterator<File>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  filename: () => Promise<AsyncIterator<String>>;
  mimetype: () => Promise<AsyncIterator<String>>;
  encoding: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
}

export interface FileNullablePromise
  extends Promise<File | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  filename: () => Promise<String>;
  mimetype: () => Promise<String>;
  encoding: () => Promise<String>;
  url: () => Promise<String>;
}

export interface TagPreviousValues {
  id: ID_Output;
  name: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface TagPreviousValuesPromise
  extends Promise<TagPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface TagPreviousValuesSubscription
  extends Promise<AsyncIterator<TagPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface TagConnection {
  pageInfo: PageInfo;
  edges: TagEdge[];
}

export interface TagConnectionPromise
  extends Promise<TagConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TagEdge>>() => T;
  aggregate: <T = AggregateTagPromise>() => T;
}

export interface TagConnectionSubscription
  extends Promise<AsyncIterator<TagConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TagEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTagSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface FileEdge {
  node: File;
  cursor: String;
}

export interface FileEdgePromise extends Promise<FileEdge>, Fragmentable {
  node: <T = FilePromise>() => T;
  cursor: () => Promise<String>;
}

export interface FileEdgeSubscription
  extends Promise<AsyncIterator<FileEdge>>,
    Fragmentable {
  node: <T = FileSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateFoundry {
  count: Int;
}

export interface AggregateFoundryPromise
  extends Promise<AggregateFoundry>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateFoundrySubscription
  extends Promise<AsyncIterator<AggregateFoundry>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

export type Long = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Role",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "Website",
    embedded: false
  },
  {
    name: "Images",
    embedded: false
  },
  {
    name: "Tag",
    embedded: false
  },
  {
    name: "Designer",
    embedded: false
  },
  {
    name: "Typeface",
    embedded: false
  },
  {
    name: "Foundry",
    embedded: false
  },
  {
    name: "File",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `${process.env["PRISMA_ENDPOINT"]}`,
  secret: `${process.env["PRISMA_SECRET"]}`
});
export const prisma = new Prisma();
